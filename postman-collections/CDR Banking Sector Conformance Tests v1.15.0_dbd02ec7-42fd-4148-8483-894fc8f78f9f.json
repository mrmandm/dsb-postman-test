{
	"info": {
		"_postman_id": "6ea34653-e918-4fc3-a301-48c09af98c98",
		"name": "CDR Banking Sector Conformance Tests v1.15.0",
		"description": "# CDR Conformance Tests\nThis collection contains a series of conformance tests for the Consumer Data Right standards applicable to the designation for the Banking sector in Australia.\n\nThese tests do not constitute a full functional test of an implementation compliant with CDR standards. It is the obligation of data holders and data recipients to functionally test their implementations fully using whatever mechanism they choose.\n\nThese tests do contain comprehensive coverage of the requirements of the standards.  A data holder implementation that is able to pass all of the tests in this collection could be reasonably described as conformant to the CDR standards for the Banking sector.\n\n# Conformance Scope\nThis collection complies with v1.11.0 of the CDR standards.\n\nIt includes support for the following API end points:\n\n### Banking APIs\n\n* Get Accounts\n* Get Bulk Balances\n* Get Balances For Specific Accounts\n* Get Account Balance\n* Get Account Details\n* Get Transactions For Account\n* Get Transaction Detail\n* Get Direct Debits For Accounts\n* Get Bulk Direct Debits\n* Get Direct Debits For Specific Accounts\n* Get Scheduled Payments For Accounts\n* Get Scheduled Payments Bulk\n* Get Scheduled Payments For Specific Accounts\n* Get Payees\n* Get Payee Details\n* Get Products\n* Get Product Detail\n\n### Common APIs\n* Get Customer\n* Get Customer Detail\n* Get Status\n* Get Outages\n\n\n# Scope Exclusions\nThis collections does not cover:\n* CDR API end points not listed above\n* Negative scenarios that are not specifically addressed in the standards for individual end points\n* Non-functional requirements\n* Information Security Profile and associated end points\n* MA-SSL configuration\n\n# Change Log\n| Change Date | Change Description |\n|-------------|--------------------|\n|1st November 2019|Initial creation of the collection|\n|1st August 2021  |Updated documentation|\n\n\n# Contact Support: \n{\n\nName : Consumer Data Standards\n\nEmail : cdr-data61@csiro.au\n\n}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic Schema Tests",
			"item": [
				{
					"name": "banking",
					"item": [
						{
							"name": "accounts",
							"item": [
								{
									"name": "direct-debits",
									"item": [
										{
											"name": "Get Bulk Direct Debits - First Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"        // set the total records in a global variable to be accessible from other calla\r",
															"        pm.variables.set(\"totalDirectDebitPages\", currentTotalPages);\r",
															"\r",
															"        // If the \r",
															"        if (currentPageSize >=  currentTotalRecords) {\r",
															"            postman.setNextRequest(\"Get Direct Debits For Specific Accounts - First Page\");\r",
															"        }\r",
															"\r",
															"        //var isMultiPage = (jsonData.meta?.totalPages > 1);\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingDirectDebitAuthorisationList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });\r",
															"}\r",
															"else {\r",
															"    console.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "7ae57b70-5b73-4478-a3b1-44531c70bfb6"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"// First page is always 1\r",
															"pm.variables.set(\"currentPage\", 1);\r",
															"// if a page size is specified use it, otherwise default\r",
															"var pageSize = pm.variables.get(\"pageSizeBulkDirectDebits\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "2abd7f95-e78d-4f63-bef7-91de0558e288"
													}
												}
											],
											"id": "2c2616e4-7517-4bd6-b5b0-3e6f46961117",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text",
														"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text",
														"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text",
														"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text",
														"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text",
														"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text",
														"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/direct-debits?product-category=CRED_AND_CHRG_CARDS&open-status=ALL&is-owned=true&page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"direct-debits"
													],
													"query": [
														{
															"key": "product-category",
															"value": "CRED_AND_CHRG_CARDS",
															"description": "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned."
														},
														{
															"key": "open-status",
															"value": "ALL",
															"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
														},
														{
															"key": "is-owned",
															"value": "true",
															"description": "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts"
														},
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												},
												"description": "Obtain direct debit authorisations for multiple, filtered accounts"
											},
											"response": []
										},
										{
											"name": "Get Bulk Direct Debits - Other Pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // This will set the next request depending on if there are any pages left to be processed\r",
															"        const pageArray = pm.variables.get(\"pageArray\");\r",
															"        if (pageArray && pageArray.length > 0){\r",
															"            postman.setNextRequest(\"Get Bulk Direct Debits - Other pages\");\r",
															"            } else {\r",
															"                postman.setNextRequest(\"Get Direct Debits For Specific Accounts - First Page\");       \r",
															"            }\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"        // set the total records in a global variable to be accessible from other calla\r",
															"        pm.collectionVariables.set(\"totalDirectDebitPages\", currentTotalPages);\r",
															"        if (currentPageSize >=  currentTotalRecords) {\r",
															"            postman.setNextRequest(\"Get Direct Debits For Specific Accounts\");\r",
															"        }\r",
															"\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingDirectDebitAuthorisationList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });\r",
															"\r",
															"} else {\r",
															"    console.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "3d2ab3ba-2203-44f1-8677-b968891a65c5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageSize = pm.variables.get(\"pageSizeBulkDirectDebits\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"var totalPages = pm.variables.get(\"totalDirectDebitPages\");\r",
															"var pageArray = pm.variables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    pageArray = [];\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"pm.variables.set(\"pageArray\", pageArray);\r",
															""
														],
														"type": "text/javascript",
														"id": "01df986c-dc8d-4a02-a68f-d135a647ef4c"
													}
												}
											],
											"id": "8789ae0a-7baf-432c-bb29-306f72df2e76",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text",
														"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text",
														"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text",
														"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text",
														"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text",
														"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text",
														"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text",
														"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/direct-debits?product-category=BUSINESS_LOANS&open-status=ALL&is-owned=true&page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"direct-debits"
													],
													"query": [
														{
															"key": "product-category",
															"value": "BUSINESS_LOANS",
															"description": "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned."
														},
														{
															"key": "open-status",
															"value": "ALL",
															"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
														},
														{
															"key": "is-owned",
															"value": "true",
															"description": "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts"
														},
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Direct Debits For Specific Accounts - First Page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"        // set the total records in a global variable to be accessible from other calla\r",
															"        pm.variables.set(\"totalDirectDebitPages\", currentTotalPages);\r",
															"        if (currentPageSize >=  currentTotalRecords) {\r",
															"            postman.setNextRequest(\"Get Bulk Balances - First page\");\r",
															"        }\r",
															"\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() { \r",
															"            const valid = ajv.validate(\"ResponseBankingDirectDebitAuthorisationList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });\r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "716766fc-72dd-49df-83ba-5a87e9036492"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeBulkDirectDebits\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "a9e79e40-ee2b-4206-bfe0-921c05f1df46"
													}
												}
											],
											"id": "90f62110-21a7-4bed-b672-3ae8a500fe29",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"data\": {\r\n        \"accountIds\": [\r\n            \"{{testAccountId1}}\",\r\n            \"{{testAccountId2}}\"\r\n        ]\r\n    },\r\n    \"meta\": {}\r\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/direct-debits?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"direct-debits"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Direct Debits For Specific Accounts - Other Pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // This will set the next request depending on if there are any pages left to be processed\r",
															"        const pageArray = pm.variables.get(\"pageArray\");\r",
															"        if (pageArray && pageArray.length > 0){\r",
															"            postman.setNextRequest(\"Get Direct Debits For Specific Accounts - Other Pages\");\r",
															"            } else {\r",
															"                postman.setNextRequest(\"Get Bulk Balances - First page\");       \r",
															"        }\r",
															"\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"        // set the total records in a global variable to be accessible from other calla\r",
															"        pm.collectionVariables.set(\"totalDirectDebitPages\", currentTotalPages);\r",
															"        if (currentPageSize >=  currentTotalRecords) {\r",
															"            postman.setNextRequest(\"Get Direct Debits For Specific Accounts\");\r",
															"        }\r",
															"\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingDirectDebitAuthorisationList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });\r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "1b41c4b5-bf95-4e0e-8b03-a41ed6379fe5"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"var pageSize = pm.variables.get(\"pageSizeBulkDirectDebits\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"var totalPages = pm.variables.get(\"totalDirectDebitPages\");\r",
															"var pageArray = pm.variables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    pageArray = [];\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"pm.variables.set(\"pageArray\", pageArray);"
														],
														"type": "text/javascript",
														"id": "bdcdd20e-4255-4dcc-a4bd-d96e7767a549"
													}
												}
											],
											"id": "425751ed-c2a0-4f20-827b-c775acdee4d7",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"data\": {\r\n        \"accountIds\": [\r\n            \"{{testAccountId1}}\",\r\n            \"{{testAccountId2}}\"\r\n        ]\r\n    },\r\n    \"meta\": {}\r\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/direct-debits?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"direct-debits"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "ae299581-2419-4433-8083-3cca3748a849"
								},
								{
									"name": "balances",
									"item": [
										{
											"name": "Get Bulk Balances - First page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"",
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        // Parse the response body",
															"        var jsonData;",
															"        try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"",
															"        // HTTP Response and headers",
															"        pm.test(\"Status code is 200\", function () {",
															"            pm.response.to.have.status(200);",
															"        });",
															"",
															"        pm.test(\"Content-Type header specifies json\", function () {",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"        });",
															"",
															"        pm.test(\"x-v header is present and has correct value\", function () {",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
															"            var checkValue = Math.min(requestXv, requestMinXv);",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
															"            pm.expect(responseXv).gte(checkValue);",
															"        });",
															"",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"        });",
															"",
															"        // Pagination tests",
															"        pm.test(\"Pagination fields in meta data are present\", function () {",
															"            pm.expect(jsonData.meta.totalPages >= 0);",
															"            pm.expect(jsonData.meta.totalRecords >= 0);",
															"        });",
															"",
															"        var currentPage = pm.variables.get(\"currentPage\");",
															"        var currentPageSize = pm.variables.get(\"pageSize\");",
															"        var currentTotalPages = jsonData?.meta?.totalPages;",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;",
															"",
															"        // set the total records in a global variable to be accessible from other calla",
															"        pm.variables.set(\"totalBulkBalancePages\", currentTotalPages);",
															"        if (currentPageSize >=  currentTotalRecords) {",
															"            postman.setNextRequest(\"Get Bulk Balances: Single Page\");",
															"        }",
															"",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
															"",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"        });",
															"",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"next\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");",
															"            pm.expect(jsonData.links).to.have.property(\"next\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");",
															"        });",
															"",
															"        // Schema payload check",
															"        pm.test('Response payload conforms to standards schema', function() {",
															"            const valid = ajv.validate(\"ResponseBankingAccountsBalanceList\", jsonData)",
															"            if (!valid){",
															"            ajv.errors.forEach(element => {",
															"                console.log(JSON.stringify(element));",
															"                });",
															"            };",
															"            pm.expect(valid).to.be.true; ",
															"        });        ",
															"",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "c074123a-92a1-49ef-92d4-ddd9d9a8bcba"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeBulkBalances\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "44fac1fe-227d-41e1-9402-6d3f86fc79f1"
													}
												}
											],
											"id": "603d9970-bf31-4645-979d-9f0cbcb55345",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/balances?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"balances"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}"
														}
													]
												},
												"description": "Obtain balances for multiple, filtered accounts"
											},
											"response": []
										},
										{
											"name": "Get Bulk Balances - Other pages",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageSize = pm.variables.get(\"pageSizeBulkBalances\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"\r",
															"var totalPages = pm.variables.get(\"totalBulkBalancePages\");\r",
															"var pageArray = pm.collectionVariables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    pageArray = [];\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"pm.collectionVariables.set(\"pageArray\", pageArray);\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "d5964e74-52fb-4ea8-b55c-5179cab93448"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        // This will set the next request depending on if there are any pages left to be processed",
															"        const pageArray = pm.variables.get(\"pageArray\");",
															"        if (pageArray && pageArray.length > 0){",
															"            postman.setNextRequest(\"Get Bulk Balances - Other pages\");",
															"            } else {",
															"                postman.setNextRequest(\"Get Balances For Specific Accounts - First page\");       ",
															"            }",
															"",
															"        // Parse the response body",
															"        var jsonData;",
															"        try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"        pm.request.url.query.get(\"page\")",
															"        // HTTP Response and headers",
															"        pm.test(\"Status code is 200\", function () {",
															"            pm.response.to.have.status(200);",
															"        });",
															"",
															"        pm.test(\"Content-Type header specifies json\", function () {",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"        });",
															"",
															"        pm.test(\"x-v header is present and has correct value\", function () {",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
															"            var checkValue = Math.min(requestXv, requestMinXv);",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
															"            pm.expect(responseXv).gte(checkValue);",
															"        });",
															"",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"        });",
															"",
															"        // Pagination tests",
															"        pm.test(\"Pagination fields in meta data are present\", function () {",
															"            pm.expect(jsonData.meta.totalPages >= 0);",
															"            pm.expect(jsonData.meta.totalRecords >= 0);",
															"        });",
															"",
															"        var currentPage = pm.variables.get(\"currentPage\");",
															"        var currentPageSize = pm.variables.get(\"pageSize\");",
															"        var currentTotalPages = jsonData?.meta?.totalPages;",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;",
															"        // set the total records in a global variable to be accessible from other calla",
															"        pm.variables.set(\"totalBulkBalancePages\", currentTotalPages);",
															"",
															"",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
															"",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"        });",
															"",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"next\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");",
															"            pm.expect(jsonData.links).to.have.property(\"next\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");",
															"        });",
															"",
															"        // Schema payload check",
															"        pm.test('Response payload conforms to standards schema', function() {",
															"            const valid = ajv.validate(\"ResponseBankingAccountsBalanceList\", jsonData)",
															"            if (!valid){",
															"            ajv.errors.forEach(element => {",
															"                console.log(JSON.stringify(element));",
															"                });",
															"            };",
															"            pm.expect(valid).to.be.true; ",
															"        });   ",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "661cee9f-19a4-40d0-9c52-80094d6405c1"
													}
												}
											],
											"id": "c47b87e4-20d5-43cd-94ee-be2c0491a214",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/balances?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"balances"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Bulk Balances: Single Page",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "eb4a0512-a2c0-4cd5-8a7d-87f9bdac573b"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        // Parse the response body",
															"        var jsonData;",
															"        try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"",
															"        // HTTP Response and headers",
															"        pm.test(\"Status code is 200\", function () {",
															"            pm.response.to.have.status(200);",
															"        });",
															"",
															"        pm.test(\"Content-Type header specifies json\", function () {",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"        });",
															"",
															"        pm.test(\"x-v header is present and has correct value\", function () {",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
															"            var checkValue = Math.min(requestXv, requestMinXv);",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
															"            pm.expect(responseXv).gte(checkValue);",
															"        });",
															"",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"        });",
															"",
															"",
															"        // Pagination tests",
															"        pm.test(\"Pagination fields in meta data are present\", function () {",
															"            pm.expect(jsonData.meta.totalPages >= 0);",
															"            pm.expect(jsonData.meta.totalRecords >= 0);",
															"        });",
															"",
															"        var currentPage = pm.variables.get(\"currentPage\");",
															"        var currentPageSize = pm.variables.get(\"pageSize\");",
															"        var currentTotalPages = jsonData?.meta?.totalPages;",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;",
															"",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
															"",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"next\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");",
															"            pm.expect(jsonData.links).to.have.property(\"next\");",
															"            pm.expect(jsonData.links).to.have.property(\"last\");",
															"        });",
															"",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
															"            pm.expect(jsonData.links).to.have.property(\"self\");",
															"            pm.expect(jsonData.links).to.have.property(\"first\");",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");",
															"        });",
															"",
															"        // Schema payload check",
															"        pm.test('Response payload conforms to standards schema', function() {",
															"            const valid = ajv.validate(\"ResponseBankingAccountsBalanceList\", jsonData)",
															"            if (!valid){",
															"            ajv.errors.forEach(element => {",
															"                console.log(JSON.stringify(element));",
															"                });",
															"            };",
															"            pm.expect(valid).to.be.true; ",
															"        });      ",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "bc254ffe-67fd-42f7-a728-078a5a3fbb96"
													}
												}
											],
											"id": "a62186ae-645e-40f0-ae37-df9f8faad8f8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/balances",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"balances"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Balances For Specific Accounts - First page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        if (pm.variables.get(\"testAccountId1\") != \"\" || pm.variables.get(\"testAccountId2\") != \"\")",
															"        {",
															"                // Parse the response body",
															"                var jsonData;",
															"                try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"                // HTTP Response and headers",
															"                pm.test(\"Status code is 200\", function () {",
															"                    pm.response.to.have.status(200);",
															"                });",
															"",
															"                pm.test(\"Content-Type header specifies json\", function () {",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"                });",
															"",
															"                pm.test(\"x-v header is present and has correct value\", function () {",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
															"                    var checkValue = Math.min(requestXv, requestMinXv);",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
															"                    pm.expect(responseXv).gte(checkValue);",
															"                });",
															"",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"                });",
															"",
															"                // Pagination tests",
															"                pm.test(\"Pagination fields in meta data are present\", function () {",
															"                    pm.expect(jsonData.meta.totalPages >= 0);",
															"                    pm.expect(jsonData.meta.totalRecords >= 0);",
															"                });",
															"",
															"                var currentPage = pm.variables.get(\"currentPage\");",
															"                var currentPageSize = pm.variables.get(\"pageSize\");",
															"                var currentTotalPages = jsonData?.meta?.totalPages;",
															"                var currentTotalRecords = jsonData?.meta?.totalRecords;",
															"",
															"                // set the total records in a global variable to be accessible from other calla",
															"                pm.variables.set(\"totalBulkBalancePages\", currentTotalPages);",
															"                if (currentPageSize >=  currentTotalRecords) {",
															"                    postman.setNextRequest(\"Get Balances For Specific Accounts - Invalid account ID\");",
															"                }",
															"",
															"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
															"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
															"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
															"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
															"",
															"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                });",
															"",
															"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");",
															"                });",
															"",
															"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");",
															"                });",
															"",
															"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
															"                });",
															"",
															"            // Schema payload check",
															"            pm.test('Response payload conforms to standards schema', function() {",
															"                const valid = ajv.validate(\"ResponseBankingAccountsBalanceList\", jsonData)",
															"                if (!valid){",
															"                ajv.errors.forEach(element => {",
															"                    console.log(JSON.stringify(element));",
															"                    });",
															"                };",
															"                pm.expect(valid).to.be.true; ",
															"            });   ",
															"        }   ",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "219a308e-23d3-4b85-8d58-7607ed9e0327"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeBulkBalances\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "94ff5db3-b3c3-4e38-be95-5831461316b0"
													}
												}
											],
											"id": "4411e7b5-fda6-48d5-bde5-35185964189d",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{testAccountId1}}\",\n            \"{{testAccountId2}}\"\n        ]\n    },\n    \"meta\": {}\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/balances?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"balances"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}"
														}
													]
												},
												"description": "Obtain balances for a specified list of accounts"
											},
											"response": []
										},
										{
											"name": "Get Balances For Specific Accounts - Other pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        if (pm.variables.get(\"testAccountId1\") != \"\" || pm.variables.get(\"testAccountId2\") != \"\")",
															"        {",
															"                // This will set the next request depending on if there are any pages left to be processed",
															"                const pageArray = pm.variables.get(\"pageArray\");",
															"                if (pageArray && pageArray.length > 0){",
															"                    postman.setNextRequest(\"Get Balances For Specific Accounts - Other pages\");",
															"                    } else {",
															"                        postman.setNextRequest(\"Get Balances For Specific Accounts - Invalid account ID\");       ",
															"                    }",
															"                // Parse the response body",
															"                var jsonData;",
															"                try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"                // HTTP Response and headers",
															"                pm.test(\"Status code is 200\", function () {",
															"                    pm.response.to.have.status(200);",
															"                });",
															"",
															"                pm.test(\"Content-Type header specifies json\", function () {",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"                });",
															"",
															"                pm.test(\"x-v header is present and has correct value\", function () {",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
															"                    var checkValue = Math.min(requestXv, requestMinXv);",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
															"                    pm.expect(responseXv).gte(checkValue);",
															"                });",
															"",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"                });",
															"",
															"",
															"                // Pagination tests",
															"                pm.test(\"Pagination fields in meta data are present\", function () {",
															"                    pm.expect(jsonData.meta.totalPages >= 0);",
															"                    pm.expect(jsonData.meta.totalRecords >= 0);",
															"                });",
															"",
															"                var currentPage = pm.variables.get(\"currentPage\");",
															"                var currentPageSize = pm.variables.get(\"pageSize\");",
															"                var currentTotalPages = jsonData?.meta?.totalPages;",
															"                var currentTotalRecords = jsonData?.meta?.totalRecords;",
															"",
															"                // set the total records in a global variable to be accessible from other calla",
															"                pm.variables.set(\"totalBulkBalancePages\", currentTotalPages);",
															"                if (currentPageSize >=  currentTotalRecords) {",
															"                    postman.setNextRequest(\"Get Balances For Specific Accounts - Invalid account ID\");",
															"                }",
															"",
															"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
															"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
															"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
															"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
															"",
															"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
															"                    pm.expect(jsonData?.links).to.have.property(\"self\");",
															"                });",
															"",
															"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");",
															"                });",
															"",
															"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");",
															"                });",
															"",
															"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
															"                });",
															"",
															"            // Schema payload check",
															"            pm.test('Response payload conforms to standards schema', function() {",
															"                const valid = ajv.validate(\"ResponseBankingAccountsBalanceList\", jsonData)",
															"                if (!valid){",
															"                ajv.errors.forEach(element => {",
															"                    console.log(JSON.stringify(element));",
															"                    });",
															"                };",
															"                pm.expect(valid).to.be.true; ",
															"            });   ",
															"        }",
															"",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "fd7554c2-0cf3-46e2-a9e8-b4670b2e5ee3"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageSize = pm.variables.get(\"pageSizeBulkBalances\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"\r",
															"var totalPages = pm.variables.get(\"totalBulkBalancePages\");\r",
															"var pageArray = pm.collectionVariables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"pm.collectionVariables.set(\"pageArray\", pageArray);"
														],
														"type": "text/javascript",
														"id": "d432b7f3-6d65-4905-a024-f25464d158f2"
													}
												}
											],
											"id": "28286b75-f750-4986-9c3d-634058795f15",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{testAccountId1}}\",\n            \"{{testAccountId2}}\"\n        ]\n    },\n    \"meta\": {}\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/balances?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"balances"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Balances For Specific Accounts - Invalid account ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        // Parse the response body",
															"        try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"",
															"        // HTTP Response and headers",
															"        pm.test(\"Status code is 422\", function () {",
															"            pm.response.to.have.status(422);",
															"        });",
															"",
															"        pm.test(\"Content-Type header specifies json\", function () {",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"        });",
															"",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"        });",
															"",
															"        // Check the specific error response value",
															"        pm.test(\"Error list should contain correct information\", function () {",
															"            console.log(\"Returned data is \" + JSON.stringify(jsonData));",
															"            pm.expect(jsonData.errors[0].code).to.equal(\"urn:au-cds:error:cds-banking:Authorisation/UnavailableBankingAccount\")",
															"            pm.expect(jsonData.errors[0].title).to.equal(\"Unavailable Banking Account\");",
															"            pm.expect(jsonData.errors[0].detail).to.equal(pm.variables.get(\"invalidId\"));",
															"        });",
															"",
															"",
															"        // Schema payload check",
															"        pm.test('Response payload conforms to standards schema', function() {",
															"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
															"            if (!valid){",
															"            ajv.errors.forEach(element => {",
															"                console.log(JSON.stringify(element));",
															"                });",
															"            };",
															"            pm.expect(valid).to.be.true; ",
															"        });     ",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "1162d40d-8b24-4b75-af68-7aa9fa9ddc0c"
													}
												}
											],
											"id": "9f6cd3b9-8938-4ea2-9e3e-30c1624401c6",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{invalidId}}\"\n        ]\n    },\n    \"meta\": {}\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/balances",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														"balances"
													]
												},
												"description": "Obtain balances for a specified list of accounts"
											},
											"response": []
										},
										{
											"name": "Get Balance For Account",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "2352896f-79a4-4a9b-b15b-db3795a53ec8"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
															"{",
															"        if (pm.variables.get(\"testAccountId1\") != \"\")",
															"        {",
															"                // Parse the response body",
															"                try { jsonData = pm.response.json(); } catch(e) {}",
															"",
															"",
															"                // HTTP Response and headers",
															"                pm.test(\"Status code is 200\", function () {",
															"                    pm.response.to.have.status(200);",
															"                });",
															"",
															"                pm.test(\"Content-Type header specifies json\", function () {",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
															"                });",
															"",
															"                pm.test(\"x-v header is present and has correct value\", function () {",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
															"                    var checkValue = Math.min(requestXv, requestMinXv);",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
															"                    pm.expect(responseXv).gte(checkValue);",
															"                });",
															"",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
															"                });",
															"",
															"                // Schema payload check",
															"                pm.test('Response payload conforms to standards schema', function() {",
															"                    const valid = ajv.validate(\"ResponseBankingAccountsBalanceById\", jsonData)",
															"                    if (!valid){",
															"                    ajv.errors.forEach(element => {",
															"                        console.log(JSON.stringify(element));",
															"                        });",
															"                    };",
															"                    pm.expect(valid).to.be.true; ",
															"                });  ",
															"             ",
															"        }",
															"",
															"} else {",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
															"}",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript",
														"id": "bb6e20dd-6a28-4b94-b5d1-cf632f92ef1d"
													}
												}
											],
											"id": "7fff3b5a-6555-4d82-94f1-d58c1b9cfbe0",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/balance",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														":accountId",
														"balance"
													],
													"variable": [
														{
															"id": "750c8a62-470b-4c9c-881c-f727aad88bf8",
															"key": "accountId",
															"value": "{{testAccountId1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"id": "564faf6d-72ab-4231-b9e3-99cd514dbdaa"
								},
								{
									"name": "{account Id}",
									"item": [
										{
											"name": "transactions",
											"item": [
												{
													"name": "Get Transactions For Account - First page",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"",
																	"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
																	"{",
																	"        if (pm.variables.get(\"testAccountId1\") != \"\")",
																	"        {",
																	"                // Parse the response body",
																	"                var jsonData;",
																	"                try { jsonData = pm.response.json(); } catch(e) {}",
																	"",
																	"                // HTTP Response and headers",
																	"                pm.test(\"Status code is 200\", function () {",
																	"                    pm.response.to.have.status(200);",
																	"                });",
																	"",
																	"                pm.test(\"Content-Type header specifies json\", function () {",
																	"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																	"                });",
																	"",
																	"                pm.test(\"x-v header is present and has correct value\", function () {",
																	"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));",
																	"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
																	"                    var checkValue = Math.min(requestXv, requestMinXv);",
																	"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
																	"                    pm.expect(responseXv).gte(checkValue);",
																	"                });",
																	"",
																	"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
																	"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
																	"                });",
																	"",
																	"                // Pagination tests",
																	"                pm.test(\"Pagination fields in meta data are present\", function () {",
																	"                    pm.expect(jsonData.meta.totalPages >= 0);",
																	"                    pm.expect(jsonData.meta.totalRecords >= 0);",
																	"                });",
																	"",
																	"                var currentPage = pm.variables.get(\"currentPage\");",
																	"                var currentPageSize = pm.variables.get(\"pageSize\");",
																	"                var currentTotalPages = jsonData?.meta?.totalPages;",
																	"                var currentTotalRecords = jsonData?.meta?.totalRecords;",
																	"",
																	"                // set the total records in a global variable to be accessible from other calls",
																	"                pm.variables.set(\"totalTransactionPages\", currentTotalPages);",
																	"                if (currentPageSize >=  currentTotalRecords) {",
																	"                    postman.setNextRequest(\"Get Transaction Detail\");",
																	"                }",
																	"",
																	"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
																	"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
																	"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
																	"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
																	"",
																	"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                });",
																	"",
																	"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"next\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"last\");",
																	"                });",
																	"",
																	"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"first\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"next\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"last\");",
																	"                });",
																	"",
																	"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"first\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
																	"                });",
																	"",
																	"                // Schema payload check",
																	"                pm.test('Response payload conforms to standards schema', function() {",
																	"                    const valid = ajv.validate(\"ResponseBankingTransactionList\", jsonData)",
																	"                    if (!valid){",
																	"                    ajv.errors.forEach(element => {",
																	"                        console.log(JSON.stringify(element));",
																	"                        });",
																	"                    };",
																	"                    pm.expect(valid).to.be.true; ",
																	"                }); ",
																	"",
																	"",
																	"        }    ",
																	"} else {",
																	"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
																	"}",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"id": "4ef807e7-5367-4eee-9fd3-f1918f086222"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"currentPage\", 1);\r",
																	"var pageSize = pm.variables.get(\"pageSizeAccounts\");\r",
																	"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
																	"    pm.variables.set(\"pageSize\", pageSize);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript",
																"id": "4c8febad-3da5-4a7b-924e-3822c62c1d07"
															}
														}
													],
													"id": "5877e1e1-006f-4b9c-89e3-00f06e134141",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-v",
																"value": "{{x-v}}",
																"type": "text"
															},
															{
																"key": "x-min-v",
																"value": "{{x-min-v}}",
																"type": "text"
															},
															{
																"key": "x-fapi-interaction-id",
																"value": "{{interactionId}}",
																"type": "text"
															},
															{
																"key": "x-fapi-auth-date",
																"value": "{{timeTenMinutesAgo}}",
																"type": "text"
															},
															{
																"key": "x-fapi-customer-ip-address",
																"value": "127.0.0.1",
																"type": "text"
															},
															{
																"key": "x-cds-client-headers",
																"value": "{{cdsClientHeader}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/transactions?page={{currentPage}}&page-size={{pageSize}}",
															"host": [
																"{{authenticatedResourceUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																":accountId",
																"transactions"
															],
															"query": [
																{
																	"key": "page",
																	"value": "{{currentPage}}",
																	"description": "Page of results to request (standard pagination)"
																},
																{
																	"key": "page-size",
																	"value": "{{pageSize}}",
																	"description": "Page size to request. Default is 25 (standard pagination)"
																}
															],
															"variable": [
																{
																	"id": "db3bc133-6c37-47ee-8133-ff7bb225871f",
																	"key": "accountId",
																	"value": "{{testAccountId1}}",
																	"description": "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points."
																}
															]
														},
														"description": "Obtain transactions for a specific account.\n\nSome general notes that apply to all end points that retrieve transactions:\n\n- Where multiple transactions are returned, transactions should be ordered according to effective date in descending order\n- As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:\n\t\t- Posted date/time if available, then\n\t\t- Execution date/time if available, then\n\t\t- A reasonable date/time nominated by the data holder using internal data structures\n- For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account"
													},
													"response": []
												},
												{
													"name": "Get Transactions For Account - Other pages",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
																	"{",
																	"        if (pm.variables.get(\"testAccountId1\") != \"\")",
																	"        {",
																	"                // This will set the next request depending on if there are any pages left to be processed",
																	"                const pageArray = pm.variables.get(\"pageArray\");",
																	"                if (pageArray && pageArray.length > 0){",
																	"                    postman.setNextRequest(\"Get Transactions For Account - Other pages\");",
																	"                    } else {",
																	"                        postman.setNextRequest(\"Get Transaction Detail\");       ",
																	"                    }",
																	"                // Parse the response body",
																	"                var jsonData;",
																	"                try { jsonData = pm.response.json(); } catch(e) {}",
																	"",
																	"",
																	"                // HTTP Response and headers",
																	"                pm.test(\"Status code is 200\", function () {",
																	"                    pm.response.to.have.status(200);",
																	"                });",
																	"",
																	"                pm.test(\"Content-Type header specifies json\", function () {",
																	"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																	"                });",
																	"",
																	"                pm.test(\"x-v header is present and has correct value\", function () {",
																	"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));",
																	"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
																	"                    var checkValue = Math.min(requestXv, requestMinXv);",
																	"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
																	"                    pm.expect(responseXv).gte(checkValue);",
																	"                });",
																	"",
																	"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
																	"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
																	"                });",
																	"",
																	"",
																	"                // Pagination tests",
																	"                pm.test(\"Pagination fields in meta data are present\", function () {",
																	"                    pm.expect(jsonData.meta.totalPages >= 0);",
																	"                    pm.expect(jsonData.meta.totalRecords >= 0);",
																	"                });",
																	"",
																	"                var currentPage = pm.variables.get(\"currentPage\");",
																	"                var currentPageSize = pm.variables.get(\"pageSize\");",
																	"                var currentTotalPages = jsonData?.meta?.totalPages;",
																	"                var currentTotalRecords = jsonData?.meta?.totalRecords;",
																	"",
																	"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
																	"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
																	"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
																	"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
																	"",
																	"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.not.have.property(\"next\");",
																	"                    pm.expect(jsonData.links).to.not.have.property(\"prev\");",
																	"                    pm.expect(jsonData.links).to.not.have.property(\"first\");",
																	"                    pm.expect(jsonData.links).to.not.have.property(\"last\");",
																	"                });",
																	"",
																	"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"next\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"last\");",
																	"                });",
																	"",
																	"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"first\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"next\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"last\");",
																	"                });",
																	"",
																	"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
																	"                    pm.expect(jsonData.links).to.have.property(\"self\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"first\");",
																	"                    pm.expect(jsonData.links).to.have.property(\"prev\");",
																	"                });",
																	"",
																	"                // Schema payload check",
																	"                pm.test('Response payload conforms to standards schema', function() {",
																	"                    const valid = ajv.validate(\"ResponseBankingTransactionList\", jsonData)",
																	"                    if (!valid){",
																	"                    ajv.errors.forEach(element => {",
																	"                        console.log(JSON.stringify(element));",
																	"                        });",
																	"                    };",
																	"                    pm.expect(valid).to.be.true; ",
																	"                }); ",
																	"",
																	"        }    ",
																	"} else {",
																	"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"id": "4b4b009b-a9e7-4e8c-9f23-f68f0369df0d"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	"var pageSize = pm.variables.get(\"pageSizeTransactions\");\r",
																	"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
																	"    pm.variables.set(\"pageSize\", pageSize);\r",
																	"}\r",
																	"var totalPages = pm.variables.get(\"totalTransactionsPages\");\r",
																	"var pageArray = pm.variables.get(\"pageArray\");\r",
																	"\r",
																	"if(!pageArray || pageArray.length == 0) {\r",
																	"    for(var i = 1; i <= totalPages; i++)\r",
																	"        pageArray.push(i);\r",
																	"}\r",
																	"\r",
																	"\r",
																	"let currentPage = pageArray.shift();\r",
																	"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
																	"    pm.variables.set(\"currentPage\", currentPage);\r",
																	"}\r",
																	"pm.variables.set(\"pageArray\", pageArray);"
																],
																"type": "text/javascript",
																"id": "8fc68eed-a375-47fc-ac61-13f2bf1b123f"
															}
														}
													],
													"id": "60b23045-e407-496c-addf-1397513f3edf",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-v",
																"value": "{{x-v}}",
																"type": "text"
															},
															{
																"key": "x-min-v",
																"value": "{{x-min-v}}",
																"type": "text"
															},
															{
																"key": "x-fapi-interaction-id",
																"value": "{{interactionId}}",
																"type": "text"
															},
															{
																"key": "x-fapi-auth-date",
																"value": "{{timeTenMinutesAgo}}",
																"type": "text"
															},
															{
																"key": "x-fapi-customer-ip-address",
																"value": "127.0.0.1",
																"type": "text"
															},
															{
																"key": "x-cds-client-headers",
																"value": "{{cdsClientHeader}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/transactions?page={{currentPage}}&page-size={{pageSize}}",
															"host": [
																"{{authenticatedResourceUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																":accountId",
																"transactions"
															],
															"query": [
																{
																	"key": "page",
																	"value": "{{currentPage}}"
																},
																{
																	"key": "page-size",
																	"value": "{{pageSize}}"
																}
															],
															"variable": [
																{
																	"id": "312be6dc-36dd-4b64-8889-e76137b762e8",
																	"key": "accountId",
																	"value": "{{testAccountId1}}",
																	"description": "ID of the account to get transactions for.  Must have previously been returned by one of the account list end points."
																}
															]
														},
														"description": "Obtain transactions for a specific account.\n\nSome general notes that apply to all end points that retrieve transactions:\n\n- Where multiple transactions are returned, transactions should be ordered according to effective date in descending order\n- As the date and time for a transaction can alter depending on status and transaction type two separate date/times are included in the payload. There are still some scenarios where neither of these time stamps is available. For the purpose of filtering and ordering it is expected that the data holder will use the “effective” date/time which will be defined as:\n\t\t- Posted date/time if available, then\n\t\t- Execution date/time if available, then\n\t\t- A reasonable date/time nominated by the data holder using internal data structures\n- For transaction amounts it should be assumed that a negative value indicates a reduction of the available balance on the account while a positive value indicates an increase in the available balance on the account"
													},
													"response": []
												},
												{
													"name": "Get Transaction Detail",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true) {",
																	"    if (pm.variables.get(\"testTransactionId\") != \"\" || pm.variables.get(\"testAccountId1\") != \"\") {",
																	"        // Parse the response body",
																	"        try { jsonData = pm.response.json(); } catch (e) { }",
																	"",
																	"",
																	"        // HTTP Response and headers",
																	"        pm.test(\"Status code is 200\", function () {",
																	"            pm.response.to.have.status(200);",
																	"        });",
																	"",
																	"        pm.test(\"Content-Type header specifies json\", function () {",
																	"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
																	"        });",
																	"",
																	"        pm.test(\"x-v header is present and has correct value\", function () {",
																	"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
																	"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
																	"            var checkValue = Math.min(requestXv, requestMinXv);",
																	"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
																	"            pm.expect(responseXv).gte(checkValue);",
																	"        });",
																	"",
																	"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
																	"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
																	"        });",
																	"",
																	"",
																	"        // Schema payload check",
																	"        pm.test('Response payload conforms to standards schema', function () {",
																	"            const valid = ajv.validate(\"ResponseBankingTransactionById\", jsonData)",
																	"            if (!valid) {",
																	"                ajv.errors.forEach(element => {",
																	"                    console.log(JSON.stringify(element));",
																	"                });",
																	"            };",
																	"            pm.expect(valid).to.be.true;",
																	"        });",
																	"",
																	"    }",
																	"",
																	"} else {",
																	"    console.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript",
																"id": "f631c717-ddeb-4192-ac36-392879f156de"
															}
														}
													],
													"id": "e1681a13-e67b-483a-acf2-ba66856d0086",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-v",
																"value": "{{x-v}}",
																"type": "text"
															},
															{
																"key": "x-min-v",
																"value": "{{x-min-v}}",
																"type": "text"
															},
															{
																"key": "x-fapi-interaction-id",
																"value": "{{interactionId}}",
																"type": "text"
															},
															{
																"key": "x-fapi-auth-date",
																"value": "{{timeTenMinutesAgo}}",
																"type": "text"
															},
															{
																"key": "x-fapi-customer-ip-address",
																"value": "127.0.0.1",
																"type": "text"
															},
															{
																"key": "x-cds-client-headers",
																"value": "{{cdsClientHeader}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/transactions/:transactionId",
															"host": [
																"{{authenticatedResourceUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																":accountId",
																"transactions",
																":transactionId"
															],
															"variable": [
																{
																	"id": "99851d4a-877f-4830-a8ba-12c9975b152e",
																	"key": "accountId",
																	"value": "{{testTransactionAccountId}}"
																},
																{
																	"id": "c55d855d-5d21-49d6-a940-f88983c56ee8",
																	"key": "transactionId",
																	"value": "{{testTransactionId}}"
																}
															]
														},
														"description": "Obtain detailed information on a transaction for a specific account"
													},
													"response": [
														{
															"id": "50ca877c-26f2-4089-bb1f-47658cb0a6ef",
															"name": "Success",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-v",
																		"value": "1",
																		"type": "text",
																		"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
																	},
																	{
																		"key": "x-fapi-interaction-id",
																		"value": "{{transactionId}}",
																		"type": "text",
																		"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
																	},
																	{
																		"key": "x-fapi-auth-date",
																		"value": "{{timeTenMinutesAgo}}",
																		"type": "text",
																		"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
																	},
																	{
																		"key": "x-fapi-customer-ip-address",
																		"value": "127.0.0.1",
																		"type": "text",
																		"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
																	},
																	{
																		"key": "x-cds-User-Agent",
																		"value": "aGVhZGVyOiB0ZXN0",
																		"type": "text",
																		"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
																	},
																	{
																		"key": "x-cds-subject",
																		"value": "{{cdsSubject}}",
																		"type": "text",
																		"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text",
																		"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/banking/accounts/:accountId/transactions/:transactionId",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"banking",
																		"accounts",
																		":accountId",
																		"transactions",
																		":transactionId"
																	],
																	"variable": [
																		{
																			"key": "accountId",
																			"value": "{{testAccountId}}"
																		},
																		{
																			"key": "transactionId",
																			"value": "{{testTransactionId}}"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "x-v",
																	"value": "1",
																	"description": "The [version](#response-headers) of the API end point that the data holder has responded with."
																},
																{
																	"key": "x-fapi-interaction-id",
																	"value": "{{interactionId}}",
																	"description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
																},
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"responseTime": null,
															"body": "{\n\t\"data\": {\n        \"accountId\": \"{{testAccountId}}\",\n        \"transactionId\": \"{{testTransactionId}}\",\n        \"isDetailAvailable\": true,\n        \"type\": \"OTHER\",\n        \"status\": \"POSTED\",\n        \"description\": \"string\",\n        \"postingDateTime\": \"2019-11-01T14:52:00.000Z\",\n        \"executionDateTime\": \"2019-10-29T12:51:00.000Z\",\n        \"amount\": \"-46.86\",\n        \"currency\": \"AUD\",\n        \"reference\": \"lorem ipsum\",\n        \"billerCode\": \"123456\",\n        \"billerName\": \"Fake Biller Co\",\n        \"crn\": \"17237769\",\n        \"apcaNumber\": \"123456\",\n\t\t\"extendedData\": {\n\t\t\t\"service\": \"X2P1.01\",\n\t\t\t\"payee\": \"payee@payee.com\",\n\t\t\t\"extensionUType\": \"x2p101Payload\",\n\t\t\t\"x2p101Payload\": {\n\t\t\t\t\"extendedDescription\": \"Description of payment\",\n\t\t\t\t\"endToEndId\": \"1234567890\"\n\t\t\t}\n\t\t}\n\t},\n\t\"links\": {\n\t    \"self\": \"https://data.holder.com.au/cds-au/v1/banking/accounts/{{testAccountId}}/transactions/{{testTransactionId}}\"\n\t},\n\t\"meta\": {}\n}"
														}
													]
												}
											],
											"id": "5eade5a9-2ef5-42b6-82ad-8ba6ef9c91c4"
										},
										{
											"name": "Get Direct Debits For Account - First page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        if (pm.variables.get(\"testAccountId1\") != \"\")\r",
															"        {\r",
															"                // Parse the response body\r",
															"                var jsonData;\r",
															"                try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"                // HTTP Response and headers\r",
															"                pm.test(\"Status code is 200\", function () {\r",
															"                    pm.response.to.have.status(200);\r",
															"                });\r",
															"\r",
															"                pm.test(\"Content-Type header specifies json\", function () {\r",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-v header is present and has correct value\", function () {\r",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"                    var checkValue = Math.min(requestXv, requestMinXv);\r",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"                    pm.expect(responseXv).gte(checkValue);\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"                });\r",
															"\r",
															"                // Pagination tests\r",
															"                pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"                    pm.expect(jsonData.meta.totalPages >= 0);\r",
															"                    pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"                });\r",
															"\r",
															"                var currentPage = pm.variables.get(\"currentPage\");\r",
															"                var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"                var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"                var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"\r",
															"                // set the total records in a global variable to be accessible from other calla\r",
															"                pm.variables.set(\"totalDirectDebitPages\", currentTotalPages);\r",
															"                if (currentPageSize >=  currentTotalRecords) {\r",
															"                    postman.setNextRequest(\"Get Scheduled Payments for Account - First page\");\r",
															"                }\r",
															"\r",
															"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                });\r",
															"\r",
															"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                });\r",
															"\r",
															"                // Schema payload check\r",
															"                pm.test('Response payload conforms to standards schema', function() {\r",
															"                    const valid = ajv.validate(\"ResponseBankingDirectDebitAuthorisationList\", jsonData)\r",
															"                    if (!valid){\r",
															"                    ajv.errors.forEach(element => {\r",
															"                        console.log(JSON.stringify(element));\r",
															"                        });\r",
															"                    };\r",
															"                    pm.expect(valid).to.be.true; \r",
															"                });  \r",
															"\r",
															"\r",
															"        }    \r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "5404ba3f-ae64-48eb-94ef-47ec60d818da"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeAccounts\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "495bbda5-b8fc-4bc8-b74f-4ae92ae0666b"
													}
												}
											],
											"id": "c634073c-a0bc-41c7-af35-0cf7aba2ab4c",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/direct-debits?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														":accountId",
														"direct-debits"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													],
													"variable": [
														{
															"id": "ce03ba0b-fe48-4bd3-941d-603328a06283",
															"key": "accountId",
															"value": "{{testAccountId1}}",
															"description": "ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points."
														}
													]
												},
												"description": "Obtain direct debit authorisations for a specific account"
											},
											"response": [
												{
													"id": "0e476a6f-661a-4b3b-bc4b-bc01a5cbe362",
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
																"key": "x-v",
																"value": "<string>"
															},
															{
																"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
																"key": "x-min-v",
																"value": "<string>"
															},
															{
																"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
																"key": "x-fapi-interaction-id",
																"value": "<string>"
															},
															{
																"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
																"key": "x-fapi-auth-date",
																"value": "<string>"
															},
															{
																"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
																"key": "x-fapi-customer-ip-address",
																"value": "<string>"
															},
															{
																"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
																"key": "x-cds-User-Agent",
																"value": "<string>"
															},
															{
																"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
																"key": "x-cds-subject",
																"value": "<string>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/banking/accounts/<string>/direct-debits?page=1&page-size=25",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																"<string>",
																"direct-debits"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "page-size",
																	"value": "25"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "x-v",
															"value": "<string>",
															"description": "The [version](#response-headers) of the API end point that the data holder has responded with."
														},
														{
															"key": "x-fapi-interaction-id",
															"value": "<string>",
															"description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n \"data\": {\n  \"directDebitAuthorisations\": [\n   {\n    \"accountId\": \"<string>\",\n    \"authorisedEntity\": {\n     \"description\": \"<string>\",\n     \"financialInstitution\": \"<string>\",\n     \"abn\": \"<string>\",\n     \"acn\": \"<string>\",\n     \"arbn\": \"<string>\"\n    },\n    \"lastDebitDateTime\": \"<string>\",\n    \"lastDebitAmount\": \"<string>\"\n   },\n   {\n    \"accountId\": \"<string>\",\n    \"authorisedEntity\": {\n     \"description\": \"<string>\",\n     \"financialInstitution\": \"<string>\",\n     \"abn\": \"<string>\",\n     \"acn\": \"<string>\",\n     \"arbn\": \"<string>\"\n    },\n    \"lastDebitDateTime\": \"<string>\",\n    \"lastDebitAmount\": \"<string>\"\n   }\n  ]\n },\n \"links\": {\n  \"self\": \"<string>\",\n  \"first\": \"<string>\",\n  \"prev\": \"<string>\",\n  \"next\": \"<string>\",\n  \"last\": \"<string>\"\n },\n \"meta\": {\n  \"totalPages\": \"<integer>\",\n  \"totalRecords\": \"<integer>\"\n }\n}"
												}
											]
										},
										{
											"name": "Get Direct Debits For Account - Other pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        if (pm.variables.get(\"testAccountId1\") != \"\")\r",
															"        {\r",
															"                // Parse the response body\r",
															"                var jsonData;\r",
															"                try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"                // HTTP Response and headers\r",
															"                pm.test(\"Status code is 200\", function () {\r",
															"                    pm.response.to.have.status(200);\r",
															"                });\r",
															"\r",
															"                pm.test(\"Content-Type header specifies json\", function () {\r",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-v header is present and has correct value\", function () {\r",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"                    var checkValue = Math.min(requestXv, requestMinXv);\r",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"                    pm.expect(responseXv).gte(checkValue);\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"                });\r",
															"\r",
															"                // Pagination tests\r",
															"                pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"                    pm.expect(jsonData.meta.totalPages >= 0);\r",
															"                    pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"                });\r",
															"\r",
															"                var currentPage = pm.variables.get(\"currentPage\");\r",
															"                var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"                var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"                var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"                // set the total records in a global variable to be accessible from other calla\r",
															"                pm.collectionVariables.set(\"totalDirectDebitPages\", currentTotalPages);\r",
															"                if (currentPageSize >=  currentTotalRecords) {\r",
															"                    postman.setNextRequest(\"Get Scheduled Payments for Account - First page\");\r",
															"                }\r",
															"\r",
															"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                });\r",
															"\r",
															"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                });\r",
															"                // Schema payload check\r",
															"                pm.test('Response payload conforms to standards schema', function() {\r",
															"                    const valid = ajv.validate(\"ResponseBankingDirectDebitAuthorisationList\", jsonData)\r",
															"                    if (!valid){\r",
															"                    ajv.errors.forEach(element => {\r",
															"                        console.log(JSON.stringify(element));\r",
															"                        });\r",
															"                    };\r",
															"                    pm.expect(valid).to.be.true; \r",
															"                });  \r",
															"\r",
															"\r",
															"        }\r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															"\r",
															"\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "5cdeee37-7a82-4970-896c-15e5bdc931cb"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"\r",
															"var pageSize = pm.variables.get(\"pageSizeBulkDirectDebits\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"var totalPages = pm.variables.get(\"totalDirectDebitPages\");\r",
															"var pageArray = pm.variables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    pageArray = [];\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"};\r",
															"pm.variables.set(\"pageArray\", pageArray);"
														],
														"type": "text/javascript",
														"id": "313660a3-ce0d-43a2-81ce-9797e3e339cf"
													}
												}
											],
											"id": "fd9ee347-9fdf-479d-8a4a-e897fb5d9da8",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/direct-debits?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														":accountId",
														"direct-debits"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													],
													"variable": [
														{
															"id": "1ba99b66-4856-4d72-a88f-81c29c0d5701",
															"key": "accountId",
															"value": "{{testAccountId1}}",
															"description": "ID of the account to get direct debit authorisations for.  Must have previously been returned by one of the account list end points."
														}
													]
												},
												"description": "Obtain direct debit authorisations for a specific account"
											},
											"response": [
												{
													"id": "6530f852-72b1-47fb-9d1a-68f9fc3c35be",
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
																"key": "x-v",
																"value": "<string>"
															},
															{
																"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
																"key": "x-min-v",
																"value": "<string>"
															},
															{
																"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
																"key": "x-fapi-interaction-id",
																"value": "<string>"
															},
															{
																"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
																"key": "x-fapi-auth-date",
																"value": "<string>"
															},
															{
																"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
																"key": "x-fapi-customer-ip-address",
																"value": "<string>"
															},
															{
																"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
																"key": "x-cds-User-Agent",
																"value": "<string>"
															},
															{
																"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
																"key": "x-cds-subject",
																"value": "<string>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/banking/accounts/<string>/direct-debits?page=1&page-size=25",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																"<string>",
																"direct-debits"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "page-size",
																	"value": "25"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "x-v",
															"value": "<string>",
															"description": "The [version](#response-headers) of the API end point that the data holder has responded with."
														},
														{
															"key": "x-fapi-interaction-id",
															"value": "<string>",
															"description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n \"data\": {\n  \"directDebitAuthorisations\": [\n   {\n    \"accountId\": \"<string>\",\n    \"authorisedEntity\": {\n     \"description\": \"<string>\",\n     \"financialInstitution\": \"<string>\",\n     \"abn\": \"<string>\",\n     \"acn\": \"<string>\",\n     \"arbn\": \"<string>\"\n    },\n    \"lastDebitDateTime\": \"<string>\",\n    \"lastDebitAmount\": \"<string>\"\n   },\n   {\n    \"accountId\": \"<string>\",\n    \"authorisedEntity\": {\n     \"description\": \"<string>\",\n     \"financialInstitution\": \"<string>\",\n     \"abn\": \"<string>\",\n     \"acn\": \"<string>\",\n     \"arbn\": \"<string>\"\n    },\n    \"lastDebitDateTime\": \"<string>\",\n    \"lastDebitAmount\": \"<string>\"\n   }\n  ]\n },\n \"links\": {\n  \"self\": \"<string>\",\n  \"first\": \"<string>\",\n  \"prev\": \"<string>\",\n  \"next\": \"<string>\",\n  \"last\": \"<string>\"\n },\n \"meta\": {\n  \"totalPages\": \"<integer>\",\n  \"totalRecords\": \"<integer>\"\n }\n}"
												}
											]
										},
										{
											"name": "Get Scheduled Payments for Account - First page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"\r",
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        if (pm.variables.get(\"testAccountId1\") != \"\")\r",
															"        {\r",
															"                // Parse the response body\r",
															"                var jsonData;\r",
															"                try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"                // HTTP Response and headers\r",
															"                pm.test(\"Status code is 200\", function () {\r",
															"                    pm.response.to.have.status(200);\r",
															"                });\r",
															"\r",
															"                pm.test(\"Content-Type header specifies json\", function () {\r",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-v header is present and has correct value\", function () {\r",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"                    var checkValue = Math.min(requestXv, requestMinXv);\r",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"                    pm.expect(responseXv).gte(checkValue);\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"                });\r",
															"\r",
															"                // Pagination tests\r",
															"                pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"                    pm.expect(jsonData.meta.totalPages >= 0);\r",
															"                    pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"                });\r",
															"\r",
															"                var currentPage = pm.variables.get(\"currentPage\");\r",
															"                var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"                var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"                var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"                // set the total records in a global variable to be accessible from other calla\r",
															"                pm.variables.set(\"totalScheduledPaymentsPages\", currentTotalPages);\r",
															"                if (currentPageSize >=  currentTotalRecords) {\r",
															"                    postman.setNextRequest(\"Get Accounts - First page\");\r",
															"                }\r",
															"\r",
															"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                });\r",
															"\r",
															"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                });\r",
															"\r",
															"                // Schema payload check\r",
															"                pm.test('Response payload conforms to standards schema', function() {\r",
															"                    const valid = ajv.validate(\"ResponseBankingScheduledPaymentsList\", jsonData)\r",
															"                    if (!valid){\r",
															"                    ajv.errors.forEach(element => {\r",
															"                        console.log(JSON.stringify(element));\r",
															"                        });\r",
															"                    };\r",
															"                    pm.expect(valid).to.be.true; \r",
															"                });  \r",
															"\r",
															"        }\r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "6129bd93-44a0-4983-ab03-5794d372f133"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeScheduledPayments\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "ea1b196c-7992-4ce9-b090-d14f924c6225"
													}
												}
											],
											"id": "0473bc69-7d44-4659-a272-23c3a3fd26cd",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/payments/scheduled?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														":accountId",
														"payments",
														"scheduled"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													],
													"variable": [
														{
															"id": "033584b6-7d5d-4ca5-b893-3ed359ee139f",
															"key": "accountId",
															"value": "{{testAccountId1}}",
															"description": "ID of the account to get scheduled payments for. Must have previously been returned by one of the account list end points. The account specified is the source account for the payment"
														}
													]
												},
												"description": "Obtain scheduled, outgoing payments for a specific account"
											},
											"response": [
												{
													"id": "2f6cbde0-e5cc-4ca8-a215-83d557f851e5",
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
																"key": "x-v",
																"value": "<string>"
															},
															{
																"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
																"key": "x-min-v",
																"value": "<string>"
															},
															{
																"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
																"key": "x-fapi-interaction-id",
																"value": "<string>"
															},
															{
																"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
																"key": "x-fapi-auth-date",
																"value": "<string>"
															},
															{
																"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
																"key": "x-fapi-customer-ip-address",
																"value": "<string>"
															},
															{
																"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
																"key": "x-cds-User-Agent",
																"value": "<string>"
															},
															{
																"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
																"key": "x-cds-subject",
																"value": "<string>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/banking/accounts/<string>/payments/scheduled?page=1&page-size=25",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																"<string>",
																"payments",
																"scheduled"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "page-size",
																	"value": "25"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "x-v",
															"value": "<string>",
															"description": "The [version](#response-headers) of the API end point that the data holder has responded with."
														},
														{
															"key": "x-fapi-interaction-id",
															"value": "<string>",
															"description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n \"data\": {\n  \"scheduledPayments\": [\n   {\n    \"from\": {\n     \"accountId\": \"<string>\"\n    },\n    \"payeeReference\": \"<string>\",\n    \"payerReference\": \"<string>\",\n    \"paymentSet\": [\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     },\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     }\n    ],\n    \"recurrence\": {\n     \"recurrenceUType\": \"<string>\",\n     \"nextPaymentDate\": \"<string>\",\n     \"onceOff\": {\n      \"paymentDate\": \"<string>\"\n     },\n     \"intervalSchedule\": {\n      \"intervals\": [\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       },\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       }\n      ],\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\",\n      \"nonBusinessDayTreatment\": \"ON\"\n     },\n     \"lastWeekDay\": {\n      \"interval\": \"<string>\",\n      \"lastWeekDay\": \"<integer>\",\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\"\n     },\n     \"eventBased\": {\n      \"description\": \"<string>\"\n     }\n    },\n    \"scheduledPaymentId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"nickname\": \"<string>\"\n   },\n   {\n    \"from\": {\n     \"accountId\": \"<string>\"\n    },\n    \"payeeReference\": \"<string>\",\n    \"payerReference\": \"<string>\",\n    \"paymentSet\": [\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     },\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     }\n    ],\n    \"recurrence\": {\n     \"recurrenceUType\": \"<string>\",\n     \"nextPaymentDate\": \"<string>\",\n     \"onceOff\": {\n      \"paymentDate\": \"<string>\"\n     },\n     \"intervalSchedule\": {\n      \"intervals\": [\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       },\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       }\n      ],\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\",\n      \"nonBusinessDayTreatment\": \"ON\"\n     },\n     \"lastWeekDay\": {\n      \"interval\": \"<string>\",\n      \"lastWeekDay\": \"<integer>\",\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\"\n     },\n     \"eventBased\": {\n      \"description\": \"<string>\"\n     }\n    },\n    \"scheduledPaymentId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"nickname\": \"<string>\"\n   }\n  ]\n },\n \"links\": {\n  \"self\": \"<string>\",\n  \"first\": \"<string>\",\n  \"prev\": \"<string>\",\n  \"next\": \"<string>\",\n  \"last\": \"<string>\"\n },\n \"meta\": {\n  \"totalPages\": \"<integer>\",\n  \"totalRecords\": \"<integer>\"\n }\n}"
												}
											]
										},
										{
											"name": "Get Scheduled Payments for Account - Other pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        if (pm.variables.get(\"testAccountId1\") != \"\")\r",
															"        {\r",
															"                // Parse the response body\r",
															"                var jsonData;\r",
															"                try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"                // HTTP Response and headers\r",
															"                pm.test(\"Status code is 200\", function () {\r",
															"                    pm.response.to.have.status(200);\r",
															"                });\r",
															"\r",
															"                pm.test(\"Content-Type header specifies json\", function () {\r",
															"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-v header is present and has correct value\", function () {\r",
															"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"                    var checkValue = Math.min(requestXv, requestMinXv);\r",
															"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"                    pm.expect(responseXv).gte(checkValue);\r",
															"                });\r",
															"\r",
															"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"                });\r",
															"\r",
															"                // Pagination tests\r",
															"                pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"                    pm.expect(jsonData.meta.totalPages >= 0);\r",
															"                    pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"                });\r",
															"\r",
															"                var currentPage = pm.variables.get(\"currentPage\");\r",
															"                var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"                var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"                var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"                // set the total records in a global variable to be accessible from other calla\r",
															"                pm.collectionVariables.set(\"totalScheduledPaymentsPages\", currentTotalPages);\r",
															"                if (currentPageSize >=  currentTotalRecords) {\r",
															"                    postman.setNextRequest(\"Get Accounts - First page\");\r",
															"                }\r",
															"\r",
															"                var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"                var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"                var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"                var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"                ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                });\r",
															"\r",
															"                ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"                });\r",
															"\r",
															"                ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"                    pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"                    pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"                });\r",
															"                // Schema payload check\r",
															"                pm.test('Response payload conforms to standards schema', function() {\r",
															"                    const valid = ajv.validate(\"ResponseBankingScheduledPaymentsList\", jsonData)\r",
															"                    if (!valid){\r",
															"                    ajv.errors.forEach(element => {\r",
															"                        console.log(JSON.stringify(element));\r",
															"                        });\r",
															"                    };\r",
															"                    pm.expect(valid).to.be.true; \r",
															"                });  \r",
															"\r",
															"\r",
															"        }\r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "d4b872af-5f52-49d8-9f20-8e85f877f73a"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageSize = pm.variables.get(\"pageSizeScheduledPayments\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"var totalPages = pm.variables.get(\"totalScheduledPaymentsPages\");\r",
															"var pageArray = pm.variables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    pageArray = [];\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"pm.variables.set(\"pageArray\", pageArray);\r",
															""
														],
														"type": "text/javascript",
														"id": "f7dd5a9d-a93d-4ebe-a3f2-42df939ce7ae"
													}
												}
											],
											"id": "1bbe3a8d-38df-45e7-ad2f-3b0342b8c176",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId/payments/scheduled?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"accounts",
														":accountId",
														"payments",
														"scheduled"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													],
													"variable": [
														{
															"id": "1415fb55-f931-463a-9d11-7d1e265aa432",
															"key": "accountId",
															"value": "{{testAccountId1}}",
															"description": "ID of the account to get scheduled payments for. Must have previously been returned by one of the account list end points. The account specified is the source account for the payment"
														}
													]
												},
												"description": "Obtain scheduled, outgoing payments for a specific account"
											},
											"response": [
												{
													"id": "410ba7c5-ca74-4964-946f-ebf5acd20f80",
													"name": "Success",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)",
																"key": "x-v",
																"value": "<string>"
															},
															{
																"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable.",
																"key": "x-min-v",
																"value": "<string>"
															},
															{
																"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction.",
																"key": "x-fapi-interaction-id",
																"value": "<string>"
															},
															{
																"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls.",
																"key": "x-fapi-auth-date",
																"value": "<string>"
															},
															{
																"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls.",
																"key": "x-fapi-customer-ip-address",
																"value": "<string>"
															},
															{
																"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls.",
																"key": "x-cds-User-Agent",
																"value": "<string>"
															},
															{
																"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls.",
																"key": "x-cds-subject",
																"value": "<string>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/banking/accounts/<string>/payments/scheduled?page=1&page-size=25",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"banking",
																"accounts",
																"<string>",
																"payments",
																"scheduled"
															],
															"query": [
																{
																	"key": "page",
																	"value": "1"
																},
																{
																	"key": "page-size",
																	"value": "25"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "x-v",
															"value": "<string>",
															"description": "The [version](#response-headers) of the API end point that the data holder has responded with."
														},
														{
															"key": "x-fapi-interaction-id",
															"value": "<string>",
															"description": "An RFC4122 UID used as a correlation id. The data holder must set the response header x-fapi-interaction-id to the value received from the corresponding fapi client request header or to a new RFC4122 UUID value if the request header was not provided to track the interaction."
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"responseTime": null,
													"body": "{\n \"data\": {\n  \"scheduledPayments\": [\n   {\n    \"from\": {\n     \"accountId\": \"<string>\"\n    },\n    \"payeeReference\": \"<string>\",\n    \"payerReference\": \"<string>\",\n    \"paymentSet\": [\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     },\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     }\n    ],\n    \"recurrence\": {\n     \"recurrenceUType\": \"<string>\",\n     \"nextPaymentDate\": \"<string>\",\n     \"onceOff\": {\n      \"paymentDate\": \"<string>\"\n     },\n     \"intervalSchedule\": {\n      \"intervals\": [\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       },\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       }\n      ],\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\",\n      \"nonBusinessDayTreatment\": \"ON\"\n     },\n     \"lastWeekDay\": {\n      \"interval\": \"<string>\",\n      \"lastWeekDay\": \"<integer>\",\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\"\n     },\n     \"eventBased\": {\n      \"description\": \"<string>\"\n     }\n    },\n    \"scheduledPaymentId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"nickname\": \"<string>\"\n   },\n   {\n    \"from\": {\n     \"accountId\": \"<string>\"\n    },\n    \"payeeReference\": \"<string>\",\n    \"payerReference\": \"<string>\",\n    \"paymentSet\": [\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     },\n     {\n      \"to\": {\n       \"toUType\": \"<string>\",\n       \"accountId\": \"<string>\",\n       \"payeeId\": \"<string>\",\n       \"domestic\": {\n        \"payeeAccountUType\": \"<string>\",\n        \"account\": {\n         \"accountName\": \"<string>\",\n         \"accountNumber\": \"<string>\",\n         \"bsb\": \"<string>\"\n        },\n        \"card\": {\n         \"cardNumber\": \"<string>\"\n        },\n        \"payId\": {\n         \"identifier\": \"<string>\",\n         \"type\": \"<string>\",\n         \"name\": \"<string>\"\n        }\n       },\n       \"biller\": {\n        \"billerCode\": \"<string>\",\n        \"billerName\": \"<string>\",\n        \"crn\": \"<string>\"\n       },\n       \"international\": {\n        \"bankDetails\": {\n         \"accountNumber\": \"<string>\",\n         \"country\": \"<string>\",\n         \"bankAddress\": {\n          \"address\": \"<string>\",\n          \"name\": \"<string>\"\n         },\n         \"beneficiaryBankBIC\": \"<string>\",\n         \"fedWireNumber\": \"<string>\",\n         \"sortCode\": \"<string>\",\n         \"chipNumber\": \"<string>\",\n         \"routingNumber\": \"<string>\",\n         \"legalEntityIdentifier\": \"<string>\"\n        },\n        \"beneficiaryDetails\": {\n         \"country\": \"<string>\",\n         \"name\": \"<string>\",\n         \"message\": \"<string>\"\n        }\n       }\n      },\n      \"isAmountCalculated\": \"<boolean>\",\n      \"amount\": \"<string>\",\n      \"currency\": \"<string>\"\n     }\n    ],\n    \"recurrence\": {\n     \"recurrenceUType\": \"<string>\",\n     \"nextPaymentDate\": \"<string>\",\n     \"onceOff\": {\n      \"paymentDate\": \"<string>\"\n     },\n     \"intervalSchedule\": {\n      \"intervals\": [\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       },\n       {\n        \"interval\": \"<string>\",\n        \"dayInInterval\": \"<string>\"\n       }\n      ],\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\",\n      \"nonBusinessDayTreatment\": \"ON\"\n     },\n     \"lastWeekDay\": {\n      \"interval\": \"<string>\",\n      \"lastWeekDay\": \"<integer>\",\n      \"finalPaymentDate\": \"<string>\",\n      \"paymentsRemaining\": \"<integer>\"\n     },\n     \"eventBased\": {\n      \"description\": \"<string>\"\n     }\n    },\n    \"scheduledPaymentId\": \"<string>\",\n    \"status\": \"<string>\",\n    \"nickname\": \"<string>\"\n   }\n  ]\n },\n \"links\": {\n  \"self\": \"<string>\",\n  \"first\": \"<string>\",\n  \"prev\": \"<string>\",\n  \"next\": \"<string>\",\n  \"last\": \"<string>\"\n },\n \"meta\": {\n  \"totalPages\": \"<integer>\",\n  \"totalRecords\": \"<integer>\"\n }\n}"
												}
											]
										}
									],
									"id": "df531c79-6094-4905-845c-da3523ebd218"
								},
								{
									"name": "Get Accounts - First page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4ff92fb-ced9-4147-8fb3-4d1b915deca9",
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
													"{",
													"        // Parse the response body",
													"        // TSX Comment 1",
													"        var jsonData;",
													"        try { jsonData = pm.response.json(); } catch(e) {}",
													"",
													"        // HTTP Response and headers",
													"        pm.test(\"Status code is 200\", function () {",
													"            pm.response.to.have.status(200);",
													"        });",
													"",
													"        pm.test(\"Content-Type header specifies json\", function () {",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"        });",
													"",
													"        pm.test(\"x-v header is present and has correct value\", function () {",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
													"            var checkValue = Math.min(requestXv, requestMinXv);",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
													"            pm.expect(responseXv).gte(checkValue);",
													"        });",
													"",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
													"        });",
													"",
													"",
													"        // Pagination tests",
													"        pm.test(\"Pagination fields in meta data are present\", function () {",
													"            pm.expect(jsonData.meta.totalPages >= 0);",
													"            pm.expect(jsonData.meta.totalRecords >= 0);",
													"        });",
													"        var currentPage = pm.variables.get(\"currentPage\");",
													"        var currentPageSize = pm.variables.get(\"pageSize\");",
													"        var currentTotalPages = jsonData?.meta?.totalPages;",
													"        var currentTotalRecords = jsonData?.meta?.totalRecords;",
													"",
													"        // need to store the number of pages so it is acccessible for subsequent requests",
													"        pm.variables.set(\"totalAccountsPages\", currentTotalPages);",
													"        if (currentTotalPages == 1) {",
													"            postman.setNextRequest(\"Get Account Detail\");   ",
													"        }",
													"",
													"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
													"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
													"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
													"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
													"",
													"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"        });",
													"",
													"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"            pm.expect(jsonData.links).to.have.property(\"next\");",
													"            pm.expect(jsonData.links).to.have.property(\"last\");",
													"        });",
													"",
													"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"            pm.expect(jsonData.links).to.have.property(\"first\");",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");",
													"            pm.expect(jsonData.links).to.have.property(\"next\");",
													"            pm.expect(jsonData.links).to.have.property(\"last\");",
													"        });",
													"",
													"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"            pm.expect(jsonData.links).to.have.property(\"first\");",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");",
													"        });",
													"",
													"",
													"        // Schema payload check",
													"        pm.test('Response payload conforms to standards schema', function() {",
													"            const valid = ajv.validate(\"ResponseBankingAccountList\", jsonData)",
													"            if (!valid){",
													"            ajv.errors.forEach(element => {",
													"                console.log(JSON.stringify(element));",
													"                });",
													"            };",
													"            pm.expect(valid).to.be.true; ",
													"        });           ",
													"} else {",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36a124ba-9508-40ac-9a79-88dd84ac62a7",
												"exec": [
													"// First page is always 1\r",
													"pm.variables.set(\"currentPage\", 1);\r",
													"// if a page size is specified use it, otherwise default\r",
													"var pageSize = pm.variables.get(\"pageSizeAccounts\");\r",
													"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "0540e02e-e8d8-47c0-887f-5ce0c8072ce0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/accounts?open-status=ALL&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"accounts"
											],
											"query": [
												{
													"key": "open-status",
													"value": "ALL",
													"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
												},
												{
													"key": "page",
													"value": "{{currentPage}}",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request. Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain a list of accounts"
									},
									"response": []
								},
								{
									"name": "Get Accounts - Other pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
													"{",
													"        // Determine if this is the last time this request is run by looking at the pageArray",
													"        const pageArray = pm.variables.get(\"pageArray\");",
													"        if (pageArray && pageArray.length > 0){",
													"            postman.setNextRequest(\"Get Accounts - Other pages\");",
													"            } else {",
													"                postman.setNextRequest(\"Get Account Detail\");       ",
													"            }",
													"",
													"        // Parse the response body",
													"        var jsonData;",
													"        try { jsonData = pm.response.json(); } catch(e) {}",
													"",
													"",
													"        // HTTP Response and headers",
													"        pm.test(\"Status code is 200\", function () {",
													"            pm.response.to.have.status(200);",
													"        });",
													"",
													"        pm.test(\"Content-Type header specifies json\", function () {",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"        });",
													"",
													"        pm.test(\"x-v header is present and has correct value\", function () {",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
													"            var checkValue = Math.min(requestXv, requestMinXv);",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
													"            pm.expect(responseXv).gte(checkValue);",
													"        });",
													"",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
													"        });",
													"",
													"",
													"        // Pagination tests",
													"        pm.test(\"Pagination fields in meta data are present\", function () {",
													"            pm.expect(jsonData.meta.totalPages >= 0);",
													"            pm.expect(jsonData.meta.totalRecords >= 0);",
													"        });",
													"",
													"        var currentPage = pm.variables.get(\"currentPage\");",
													"        var currentPageSize = pm.variables.get(\"pageSize\");",
													"        var currentTotalPages = jsonData?.meta?.totalPages;",
													"        var currentTotalRecords = jsonData?.meta?.totalRecords;",
													"",
													"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;",
													"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;",
													"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;",
													"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;",
													"",
													"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"        });",
													"",
													"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"            pm.expect(jsonData.links).to.have.property(\"next\");",
													"            pm.expect(jsonData.links).to.have.property(\"last\");",
													"        });",
													"",
													"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"            pm.expect(jsonData.links).to.have.property(\"first\");",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");",
													"            pm.expect(jsonData.links).to.have.property(\"next\");",
													"            pm.expect(jsonData.links).to.have.property(\"last\");",
													"        });",
													"",
													"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {",
													"            pm.expect(jsonData.links).to.have.property(\"self\");",
													"            pm.expect(jsonData.links).to.have.property(\"first\");",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");",
													"        });",
													"",
													"",
													"        // Schema payload check",
													"        pm.test('Response payload conforms to standards schema', function() {",
													"            const valid = ajv.validate(\"ResponseBankingAccountList\", jsonData)",
													"            if (!valid){",
													"            ajv.errors.forEach(element => {",
													"                console.log(JSON.stringify(element));",
													"                });",
													"            };",
													"            pm.expect(valid).to.be.true; ",
													"        });",
													"} else {",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "85483545-ec4b-4fdb-a24d-d2ca7e6d4a66"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageSize = pm.variables.get(\"pageSizeAccounts\");\r",
													"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}\r",
													"\r",
													"// The totalAccountsPages is set in the previous \"******** - First page\" request\r",
													"var totalPages = pm.variables.get(\"totalAccountsPages\");\r",
													"// pageArray is an array of consequtive numbers\r",
													"var pageArray = pm.variables.get(\"pageArray\");\r",
													"\r",
													"if(!pageArray || pageArray.length == 0) {\r",
													"    for(var i = 1; i <= totalPages; i++)\r",
													"        pageArray.push(i);\r",
													"}\r",
													"\r",
													"let currentPage = pageArray.shift();\r",
													"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
													"    pm.variables.set(\"currentPage\", currentPage);\r",
													"}\r",
													"pm.variables.set(\"pageArray\", pageArray);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "7a94eaa8-eae3-4320-ab84-4ad9beb2924c"
											}
										}
									],
									"id": "fbd720fe-8d8e-486b-bb52-c6dc9d5632bb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/accounts?open-status=ALL&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"accounts"
											],
											"query": [
												{
													"key": "open-status",
													"value": "ALL",
													"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
												},
												{
													"key": "page",
													"value": "{{currentPage}}",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request. Default is 25 (standard pagination)"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Account Detail",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "c6251f5c-af79-4605-b64e-8ef38c7e896d"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
													"{",
													"        // if not id is provided we skip these tests",
													"        if (pm.variables.get(\"testAccountId1\") != \"\")",
													"        {",
													"                // Parse the response body",
													"                var jsonData;",
													"                try { jsonData = pm.response.json(); } catch(e) {}",
													"",
													"                // HTTP Response and headers",
													"                pm.test(\"Status code is 200\", function () {",
													"                    pm.response.to.have.status(200);",
													"                });",
													"",
													"                pm.test(\"Content-Type header specifies json\", function () {",
													"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"                });",
													"",
													"                pm.test(\"x-v header is present and has correct value\", function () {",
													"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));",
													"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
													"                    var checkValue = Math.min(requestXv, requestMinXv);",
													"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
													"                    pm.expect(responseXv).gte(checkValue);",
													"                });",
													"",
													"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
													"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
													"                });",
													"",
													"",
													"        // Schema payload check",
													"        pm.test('Response payload conforms to standards schema', function() {",
													"            const valid = ajv.validate(\"ResponseBankingAccountByIdV2\", jsonData)",
													"            if (!valid){",
													"            ajv.errors.forEach(element => {",
													"                console.log(JSON.stringify(element));",
													"                });",
													"            };",
													"            pm.expect(valid).to.be.true; ",
													"        });",
													"    }",
													"",
													"} else {",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
													"}",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "0ccc39de-1cc6-4b2f-996d-ee05e2540dc6"
											}
										}
									],
									"id": "b74225a4-5e64-4029-a464-db9bbc1b7ae3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"id": "a4bb60de-8de1-406c-94f9-1141d37b9c84",
													"key": "accountId",
													"value": "{{testAccountId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Account Detail - Invalid Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "b1ddc3c6-c51a-4cd7-89ff-f9feb6c003f6"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
													"{",
													"        // Parse the response body",
													"        var jsonData;",
													"        try { jsonData = pm.response.json(); } catch(e) {}",
													"",
													"        // HTTP Response and headers",
													"        pm.test(\"Status code is 404\", function () {",
													"            pm.response.to.have.status(404);",
													"        });",
													"",
													"        pm.test(\"Content-Type header specifies json\", function () {",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"        });",
													"",
													"        pm.test(\"x-v header is present is integer\", function () {",
													"            var respxv = pm.response.headers.get(\"x-v\");",
													"            Number.isInteger(respxv);",
													"        });",
													"",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
													"        });",
													"} else {",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
													"}",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "c3eae9a6-8cd3-4059-ab70-4dda984c4e82"
											}
										}
									],
									"id": "4978818d-8359-46af-834c-f54867901c82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/accounts/:accountId",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"accounts",
												":accountId"
											],
											"variable": [
												{
													"id": "39be48b7-07f9-4f3a-981d-aca58490ffaf",
													"key": "accountId",
													"value": "{{invalidId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Accounts - Out of range page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
													"{",
													"        // Parse the response body",
													"        var jsonData;",
													"        try { jsonData = pm.response.json(); } catch(e) {}",
													"",
													"",
													"        // HTTP Response and headers",
													"        pm.test(\"Status code is 422\", function () {",
													"            pm.response.to.have.status(422);",
													"        });",
													"",
													"        pm.test(\"Content-Type header specifies json\", function () {",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"        });",
													"",
													"",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
													"        });",
													"",
													"",
													"        // Schema payload check",
													"        pm.test('Response payload conforms to standards schema', function() {",
													"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
													"            if (!valid){",
													"            ajv.errors.forEach(element => {",
													"                console.log(JSON.stringify(element));",
													"                });",
													"            };",
													"            pm.expect(valid).to.be.true; ",
													"        });        ",
													"} else {",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
													"}",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "f15bca0e-b95e-4396-9728-54221306d7fc"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageSize = pm.variables.get(\"pageSizeAccounts\");\r",
													"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}\r",
													"\r",
													"// The totalAccountsPages is set in the previous \"******** - First page\" request\r",
													"var totalPages = pm.variables.get(\"totalAccountsPages\");\r",
													"//let currentPage = totalPages + 1;\r",
													"let currentPage = 99999;\r",
													"pm.variables.set(\"currentPage\", currentPage)\r",
													""
												],
												"type": "text/javascript",
												"id": "1df54dce-be9e-4104-a790-08967feb8314"
											}
										}
									],
									"id": "e3976d47-afae-4c6c-b7f7-ee935b657325",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/accounts?open-status=ALL&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"accounts"
											],
											"query": [
												{
													"key": "open-status",
													"value": "ALL",
													"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
												},
												{
													"key": "page",
													"value": "{{currentPage}}",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request. Default is 25 (standard pagination)"
												}
											]
										}
									},
									"response": []
								}
							],
							"id": "7ef75ae5-0c34-48be-84f6-198a89928165"
						},
						{
							"name": "payments",
							"item": [
								{
									"name": "scheduled",
									"item": [
										{
											"name": "Get Scheduled Payments Bulk - First page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present is integer\", function () {\r",
															"            var respxv = pm.response.headers.get(\"x-v\");\r",
															"            Number.isInteger(respxv);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"        pm.variables.set(\"totalScheduledPaymentsPages\", currentTotalPages);\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingScheduledPaymentsList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });         \r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "e6d9f114-a687-4788-a3cc-9f7c2a8301a8"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeScheduledPayments\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "e60603f8-f944-4118-b1c8-577ea012ffc2"
													}
												}
											],
											"id": "aa72baa7-66b1-4175-bb82-57526a55ae36",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/payments/scheduled?product-category=CRED_AND_CHRG_CARDS&open-status=ALL&is-owned=true&page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"payments",
														"scheduled"
													],
													"query": [
														{
															"key": "product-category",
															"value": "CRED_AND_CHRG_CARDS",
															"description": "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned."
														},
														{
															"key": "open-status",
															"value": "ALL",
															"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
														},
														{
															"key": "is-owned",
															"value": "true",
															"description": "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts"
														},
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												},
												"description": "Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments"
											},
											"response": []
										},
										{
											"name": "Get Scheduled Payments Bulk - Other pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // Determine if this is the last time this request is run by looking at the pageArray\r",
															"        const pageArray = pm.variables.get(\"pageArray\");\r",
															"        if (pageArray && pageArray.length > 0){\r",
															"            postman.setNextRequest(\"Get Scheduled Payments Bulk - Other pages\");\r",
															"            } else {\r",
															"                postman.setNextRequest(\"Get Scheduled Payments For Specific Accounts - First page\");       \r",
															"            }\r",
															"\r",
															"\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"        pm.collectionVariables.set(\"totalScheduledPaymentsPages\", currentTotalPages);\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingScheduledPaymentsList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });    \r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "3500186b-2525-42f1-87fb-d46e15f31aa1"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageSize = pm.variables.get(\"pageSizeScheduledPayments\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"var totalPages = pm.variables.get(\"totalScheduledPaymentsPages\");\r",
															"var pageArray = pm.variables.get(\"pageArray\");\r",
															"console.log(\"Page array is \" + pageArray);\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {currentPage = 1} else {\r",
															"    pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"\r",
															"pm.variables.set(\"pageArray\", pageArray);"
														],
														"type": "text/javascript",
														"id": "ac0cd105-91fd-4922-8540-87fd3fb64b4d"
													}
												}
											],
											"id": "37e07bd9-59a4-476a-8e99-4d0dcb82482f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/payments/scheduled?product-category=CRED_AND_CHRG_CARDS&open-status=ALL&is-owned=true&page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"payments",
														"scheduled"
													],
													"query": [
														{
															"key": "product-category",
															"value": "CRED_AND_CHRG_CARDS",
															"description": "Used to filter results on the productCategory field applicable to accounts. Any one of the valid values for this field can be supplied. If absent then all accounts returned."
														},
														{
															"key": "open-status",
															"value": "ALL",
															"description": "Used to filter results according to open/closed status. Values can be OPEN, CLOSED or ALL. If absent then ALL is assumed"
														},
														{
															"key": "is-owned",
															"value": "true",
															"description": "Filters accounts based on whether they are owned by the authorised customer.  True for owned accounts, false for unowned accounts and absent for all accounts"
														},
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												},
												"description": "Obtain scheduled payments for multiple, filtered accounts that are the source of funds for the payments"
											},
											"response": []
										},
										{
											"name": "Get Scheduled Payments For Specific Accounts - First page",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"\r",
															"        pm.variables.set(\"totalScheduledPaymentsPages\", currentTotalPages);\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingScheduledPaymentsList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });    \r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "fd680378-4aed-4fc5-b0dc-8feff2b92037"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"currentPage\", 1);\r",
															"var pageSize = pm.variables.get(\"pageSizeScheduledPayments\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}"
														],
														"type": "text/javascript",
														"id": "ed12509d-d283-4f6b-8be8-99534f7b3b5d"
													}
												}
											],
											"id": "5e15d700-a8c4-4e76-8485-579fe8b2f38f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{testAccountId1}}\",\n            \"{{testAccountId2}}\"\n        ]\n    },\n    \"meta\": {}\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/payments/scheduled?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"payments",
														"scheduled"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												},
												"description": "Obtain scheduled payments for a specified list of accounts"
											},
											"response": []
										},
										{
											"name": "Get Scheduled Payments For Specific Accounts - Other pages",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
															"{\r",
															"        // Determine if this is the last time this request is run by looking at the pageArray\r",
															"        const pageArray = pm.variables.get(\"pageArray\");\r",
															"        if (pageArray && pageArray.length > 0){\r",
															"            postman.setNextRequest(\"Get Scheduled Payments For Specific Accounts - Other pages\");\r",
															"            } else {   \r",
															"                postman.setNextRequest(\"Get Payees - First page\");       \r",
															"            }\r",
															"\r",
															"        // Parse the response body\r",
															"        var jsonData;\r",
															"        try { jsonData = pm.response.json(); } catch(e) {}\r",
															"\r",
															"\r",
															"        // HTTP Response and headers\r",
															"        pm.test(\"Status code is 200\", function () {\r",
															"            pm.response.to.have.status(200);\r",
															"        });\r",
															"\r",
															"        pm.test(\"Content-Type header specifies json\", function () {\r",
															"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-v header is present and has correct value\", function () {\r",
															"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
															"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
															"            var checkValue = Math.min(requestXv, requestMinXv);\r",
															"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
															"            pm.expect(responseXv).gte(checkValue);\r",
															"        });\r",
															"\r",
															"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
															"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
															"        });\r",
															"\r",
															"        // Pagination tests\r",
															"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
															"            pm.expect(jsonData.meta.totalPages >= 0);\r",
															"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
															"        });\r",
															"\r",
															"        var currentPage = pm.variables.get(\"currentPage\");\r",
															"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
															"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
															"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
															"\r",
															"        pm.collectionVariables.set(\"totalScheduledPaymentsPages\", currentTotalPages);\r",
															"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
															"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
															"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
															"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
															"\r",
															"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
															"        // pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
															"        });\r",
															"\r",
															"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
															"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
															"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
															"            //pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
															"        });\r",
															"\r",
															"        // Schema payload check\r",
															"        pm.test('Response payload conforms to standards schema', function() {\r",
															"            const valid = ajv.validate(\"ResponseBankingScheduledPaymentsList\", jsonData)\r",
															"            if (!valid){\r",
															"            ajv.errors.forEach(element => {\r",
															"                console.log(JSON.stringify(element));\r",
															"                });\r",
															"            };\r",
															"            pm.expect(valid).to.be.true; \r",
															"        });    \r",
															"\r",
															"\r",
															"} else {\r",
															"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
															"}\r",
															""
														],
														"type": "text/javascript",
														"id": "ba865eaf-332f-4802-9a93-631a139b6d4b"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"var pageSize = pm.variables.get(\"pageSizeScheduledPayments\");\r",
															"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
															"    pm.variables.set(\"pageSize\", pageSize);\r",
															"}\r",
															"\r",
															"var totalPages = pm.variables.get(\"totalScheduledPaymentsPages\");\r",
															"var pageArray = pm.variables.get(\"pageArray\");\r",
															"\r",
															"if(!pageArray || pageArray.length == 0) {\r",
															"    for(var i = 1; i <= totalPages; i++)\r",
															"        pageArray.push(i);\r",
															"}\r",
															"\r",
															"let currentPage = pageArray.shift();\r",
															"if (currentPage == null) {currentPage = 1} else {\r",
															"pm.variables.set(\"currentPage\", currentPage);\r",
															"}\r",
															"pm.variables.set(\"currentPage\", currentPage);\r",
															"pm.variables.set(\"pageArray\", pageArray);"
														],
														"type": "text/javascript",
														"id": "90a930c5-84dd-4066-a20d-5cb8a4882c7a"
													}
												}
											],
											"id": "00dfac9e-20f7-4d15-893d-cd08e7fbbd8f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "x-v",
														"value": "{{x-v}}",
														"type": "text"
													},
													{
														"key": "x-min-v",
														"value": "{{x-min-v}}",
														"type": "text"
													},
													{
														"key": "x-fapi-interaction-id",
														"value": "{{interactionId}}",
														"type": "text"
													},
													{
														"key": "x-fapi-auth-date",
														"value": "{{timeTenMinutesAgo}}",
														"type": "text"
													},
													{
														"key": "x-fapi-customer-ip-address",
														"value": "127.0.0.1",
														"type": "text"
													},
													{
														"key": "x-cds-client-headers",
														"value": "{{cdsClientHeader}}",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"data\": {\n        \"accountIds\": [\n            \"{{testAccountId1}}\",\n            \"{{testAccountId2}}\"\n        ]\n    },\n    \"meta\": {}\n}"
												},
												"url": {
													"raw": "{{authenticatedResourceUrl}}/banking/payments/scheduled?page={{currentPage}}&page-size={{pageSize}}",
													"host": [
														"{{authenticatedResourceUrl}}"
													],
													"path": [
														"banking",
														"payments",
														"scheduled"
													],
													"query": [
														{
															"key": "page",
															"value": "{{currentPage}}",
															"description": "Page of results to request (standard pagination)"
														},
														{
															"key": "page-size",
															"value": "{{pageSize}}",
															"description": "Page size to request. Default is 25 (standard pagination)"
														}
													]
												},
												"description": "Obtain scheduled payments for a specified list of accounts"
											},
											"response": []
										}
									],
									"id": "6936f77c-754c-41f6-bc02-3c7fc1ec31d7"
								}
							],
							"id": "a6c8fa7e-90c7-43da-b740-93336cef477b"
						},
						{
							"name": "payees",
							"item": [
								{
									"name": "Get Payees - First page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
													"{\r",
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try { jsonData = pm.response.json(); } catch(e) {}\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"        pm.test(\"Content-Type header specifies json\", function () {\r",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-v header is present and has correct value\", function () {\r",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"            var checkValue = Math.min(requestXv, requestMinXv);\r",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"            pm.expect(responseXv).gte(checkValue);\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
													"        });\r",
													"        // Pagination tests\r",
													"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
													"            pm.expect(jsonData.meta.totalPages >= 0);\r",
													"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
													"        });\r",
													"\r",
													"        var currentPage = pm.variables.get(\"currentPage\");\r",
													"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
													"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
													"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
													"\r",
													"        pm.variables.set(\"totalPayeePages\", currentTotalPages);\r",
													"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
													"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
													"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
													"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
													"\r",
													"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"        });\r",
													"\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"ResponseBankingPayeeListV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });    \r",
													"\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "fad06db9-3f87-4ad9-a1fd-6f4947ab9abd"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"currentPage\", 1);\r",
													"var pageSize = pm.variables.get(\"pageSizePayees\");\r",
													"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "d685ce73-aeaf-47a0-991d-6c89caa1b04f"
											}
										}
									],
									"id": "9f2619c6-f907-4f29-8411-e8c0032848e0",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/payees?type=ALL&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"payees"
											],
											"query": [
												{
													"key": "type",
													"value": "ALL",
													"description": "Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL"
												},
												{
													"key": "page",
													"value": "{{currentPage}}",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request. Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain a list of pre-registered payees"
									},
									"response": []
								},
								{
									"name": "Get Payees - Other pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
													"{\r",
													"        // Determine the next test request\r",
													"        const pageArray = pm.variables.get(\"pageArray\");\r",
													"        if (pageArray && pageArray.length > 0){\r",
													"            postman.setNextRequest(\"Get Payees - Other pages\");\r",
													"            } else {\r",
													"                postman.setNextRequest(\"Get Payee Detail\");       \r",
													"            }\r",
													"\r",
													"\r",
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try { jsonData = pm.response.json(); } catch(e) {}\r",
													"\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"        pm.test(\"Content-Type header specifies json\", function () {\r",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-v header is present and has correct value\", function () {\r",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"            var checkValue = Math.min(requestXv, requestMinXv);\r",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"            pm.expect(responseXv).gte(checkValue);\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
													"        });\r",
													"\r",
													"        // Pagination tests\r",
													"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
													"            pm.expect(jsonData.meta.totalPages >= 0);\r",
													"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
													"        });\r",
													"\r",
													"        var currentPage = pm.variables.get(\"currentPage\");\r",
													"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
													"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
													"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
													"\r",
													"        pm.collectionVariables.set(\"totalPayeePages\", currentTotalPages);\r",
													"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
													"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
													"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
													"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
													"\r",
													"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"        });\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"ResponseBankingPayeeListV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });  \r",
													"\r",
													"\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "ce4557e5-aad4-4bf9-b875-6fc3f628c0eb"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var pageSize = pm.variables.get(\"pageSizePayees\");\r",
													"if (pageSize == undefined) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}\r",
													"\r",
													"var totalPages = pm.variables.get(\"totalPayeePages\");\r",
													"var pageArray = pm.variables.get(\"pageArray\");\r",
													"\r",
													"if(!pageArray || pageArray.length == 0) {\r",
													"    for(var i = 1; i <= totalPages; i++)\r",
													"        pageArray.push(i);\r",
													"}\r",
													"\r",
													"let currentPage = pageArray.shift();\r",
													"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
													"pm.variables.set(\"currentPage\", currentPage);\r",
													"}\r",
													"pm.variables.set(\"pageArray\", pageArray);"
												],
												"type": "text/javascript",
												"id": "e827554a-174f-4897-9084-a39d19302d6c"
											}
										}
									],
									"id": "557b84dd-d0f2-4962-a060-292390796660",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/payees?type=ALL&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"payees"
											],
											"query": [
												{
													"key": "type",
													"value": "ALL",
													"description": "Filter on the payee type field.  In addition to normal type field values, ALL can be specified to retrieve all payees.  If absent the assumed value is ALL"
												},
												{
													"key": "page",
													"value": "{{currentPage}}",
													"description": "Page of results to request (standard pagination)"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}",
													"description": "Page size to request. Default is 25 (standard pagination)"
												}
											]
										},
										"description": "Obtain a list of pre-registered payees"
									},
									"response": []
								},
								{
									"name": "Get Payee Detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
													"{\r",
													"        // if no id is provided we will skip these tests\r",
													"        if (pm.variables.get(\"testPayeeId\") != \"\")\r",
													"        {\r",
													"                // Parse the response body\r",
													"                var jsonData;\r",
													"                try { jsonData = pm.response.json(); } catch(e) {}\r",
													"                // HTTP Response and headers\r",
													"                pm.test(\"Status code is 200\", function () {\r",
													"                    pm.response.to.have.status(200);\r",
													"                });\r",
													"\r",
													"                pm.test(\"Content-Type header specifies json\", function () {\r",
													"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"                });\r",
													"\r",
													"                pm.test(\"x-v header is present and has correct value\", function () {\r",
													"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"                    var checkValue = Math.min(requestXv, requestMinXv);\r",
													"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"                    pm.expect(responseXv).gte(checkValue);\r",
													"                });\r",
													"\r",
													"                pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
													"                    pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
													"                });\r",
													"\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"ResponseBankingPayeeByIDV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });  \r",
													"    }\r",
													"\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "eb8ec5cd-b7a2-47d4-b447-f9f5c1795305"
											}
										}
									],
									"id": "5c74ad52-568f-4a2f-813e-af1f6d38ddd8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/payees/:payeeId",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"payees",
												":payeeId"
											],
											"variable": [
												{
													"id": "cce65f93-535a-4269-aa72-e21070eeaf6d",
													"key": "payeeId",
													"value": "{{testPayeeId}}",
													"description": "The ID used to locate the details of a particular payee"
												}
											]
										},
										"description": "Obtain detailed information on a single payee"
									},
									"response": []
								},
								{
									"name": "Get Payee Detail - Invalid Payee",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
													"{\r",
													"        // Parse the response body\r",
													"        var jsonData = null;\r",
													"        if (pm.response.jsonData != null) {\r",
													"            jsonData = pm.response.json();\r",
													"        }\r",
													"        //var jsonData = pm.response?.json();\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 404\", function () {\r",
													"            pm.response.to.have.status(404);\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
													"        });\r",
													"\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "db2d9ca0-c200-40e0-879d-f2160a0b430e"
											}
										}
									],
									"id": "948f86a4-3d8b-4a9d-a4d8-336f4c7feca4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"url": {
											"raw": "{{authenticatedResourceUrl}}/banking/payees/:payeeId",
											"host": [
												"{{authenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"payees",
												":payeeId"
											],
											"variable": [
												{
													"id": "65a2cdb3-b214-4302-a8e3-b5d9ce48e2bf",
													"key": "payeeId",
													"value": "{{invalidId}}",
													"description": "The ID used to locate the details of a particular payee"
												}
											]
										},
										"description": "Obtain detailed information on a single payee"
									},
									"response": []
								}
							],
							"id": "d4751e36-a1f5-493a-a15c-9ba4b883b54d"
						},
						{
							"name": "products",
							"item": [
								{
									"name": "Get Products - First page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true)\r",
													"{\r",
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try { jsonData = pm.response.json(); } catch(e) {}\r",
													"\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"        pm.test(\"Content-Type header specifies json\", function () {\r",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-v header is present and has correct value\", function () {\r",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"            var checkValue = Math.min(requestXv, requestMinXv);\r",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"            pm.expect(responseXv).gte(checkValue);\r",
													"        });\r",
													"\r",
													"\r",
													"\r",
													"        // Pagination tests\r",
													"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
													"            pm.expect(jsonData.meta.totalPages >= 0);\r",
													"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
													"        });\r",
													"        var currentPage = pm.variables.get(\"currentPage\");\r",
													"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
													"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
													"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
													"\r",
													"        pm.variables.set(\"totalProductPages\", currentTotalPages);\r",
													"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
													"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
													"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
													"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
													"\r",
													"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"        });\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"ResponseBankingProductListV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });    \r",
													"}\r",
													"else \r",
													"{\r",
													"\t    console.error(\"Minimum variable set not defined for test: baseUrl\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "bc535962-85c1-4a66-82e5-0c439f859ac4"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.collectionVariables.set(\"productCategory\", \"BUSINESS_LOANS\");\r",
													"pm.collectionVariables.set(\"effective\", \"CURRENT\");\r",
													"\r",
													"// var pageSize = pm.variables.get(\"pageSizeProducts\");\r",
													"// pm.variables.set(\"currentPage\", 1);\r",
													"// if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"//     pm.variables.set(\"pageSize\", pageSize);\r",
													"// }\r",
													"\r",
													"// First page is always 1\r",
													"pm.variables.set(\"currentPage\", 1);\r",
													"// if a page size is specified use it, otherwise default\r",
													"var pageSize = pm.variables.get(\"pageSizeProducts\");\r",
													"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}"
												],
												"type": "text/javascript",
												"id": "f94440be-0d05-48aa-ac71-3c7e7f7c7bdf"
											}
										}
									],
									"id": "810bb874-03b3-4150-a1b6-717146f6f06f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{unauthenticatedResourceUrl}}/banking/products?effective={{effective}}&product-category={{productCategory}}&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{unauthenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"products"
											],
											"query": [
												{
													"key": "effective",
													"value": "{{effective}}"
												},
												{
													"key": "product-category",
													"value": "{{productCategory}}"
												},
												{
													"key": "page",
													"value": "{{currentPage}}"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}"
												}
											]
										},
										"description": "Obtain a list of products that are currently openly offered to the market\n\nNote that the results returned by this end point are expected to be ordered according to updated-since\n\n### Conventions\nIn the product reference payloads there are a number of recurring conventions that are explained here, in one place.\n\n#### Arrays Of Features\n\nIn the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:\n\n- Each element in an array has the same structure so that clients can reliably interpret the payloads\n- Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees.\n- Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product.\n- An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths.\n- An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product.\n- Depending on the type of data being represented there may be additional specific fields.\n\n#### URIs To More Information\n\nAs the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.\n\nThese URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.\n\n#### Linkage To Accounts\nFrom the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.\n\nFor this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.\n\nSimilarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.\n\n#### Dates\nIt is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.\n\nIn addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely."
									},
									"response": []
								},
								{
									"name": "Get Products - Other pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true)\r",
													"{\r",
													"        // Determine the next test request\r",
													"        const pageArray = pm.variables.get(\"pageArray\");\r",
													"        if (pageArray && pageArray.length > 0){\r",
													"            postman.setNextRequest(\"Get Products - Other pages\");\r",
													"            } else {\r",
													"                postman.setNextRequest(\"Get Product Detail\");       \r",
													"            }\r",
													"\r",
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try { jsonData = pm.response.json(); } catch(e) {}\r",
													"\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"        pm.test(\"Content-Type header specifies json\", function () {\r",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-v header is present and has correct value\", function () {\r",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"            var checkValue = Math.min(requestXv, requestMinXv);\r",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"            pm.expect(responseXv).gte(checkValue);\r",
													"        });\r",
													"\r",
													"\r",
													"        // Pagination tests\r",
													"        pm.test(\"Pagination fields in meta data are present\", function () {\r",
													"            pm.expect(jsonData.meta.totalPages >= 0);\r",
													"            pm.expect(jsonData.meta.totalRecords >= 0);\r",
													"        });\r",
													"        var currentPage = pm.variables.get(\"currentPage\");\r",
													"        var currentPageSize = pm.variables.get(\"pageSize\");\r",
													"        var currentTotalPages = jsonData?.meta?.totalPages;\r",
													"        var currentTotalRecords = jsonData?.meta?.totalRecords;\r",
													"\r",
													"        pm.variables.set(\"totalProductPages\", currentTotalPages);\r",
													"        var isFirstPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 1;\r",
													"        var isMiddlePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 2;\r",
													"        var isLastPage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 3;\r",
													"        var isSingleResponsePage = utils.whichPage(currentPage,currentTotalPages, currentTotalRecords, currentPageSize) == 0;\r",
													"\r",
													"        ((isSingleResponsePage) ? pm.test : pm.test.skip)(\"Single-page correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isFirstPage) ? pm.test : pm.test.skip)(\"Multi-page: First page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        // pm.expect(jsonData.links).to.not.have.property(\"first\");\r",
													"        // pm.expect(jsonData.links).to.not.have.property(\"prev\");\r",
													"        });\r",
													"\r",
													"        ((isMiddlePage) ? pm.test : pm.test.skip)(\"Multi-page: Middle page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"next\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"last\");\r",
													"        });\r",
													"\r",
													"        ((isLastPage) ? pm.test : pm.test.skip)(\"Multi-page: Last page  correct links in response\", function () {\r",
													"            pm.expect(jsonData.links).to.have.property(\"self\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"first\");\r",
													"            pm.expect(jsonData.links).to.have.property(\"prev\");\r",
													"            //pm.expect(jsonData.links).to.not.have.property(\"next\");\r",
													"            //pm.expect(jsonData.links).to.not.have.property(\"last\");\r",
													"        });\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"ResponseBankingProductListV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        }); \r",
													"\r",
													"   \r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "f3508d36-a3fa-4068-8ef7-7d5c8a831522"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// var pageSize = pm.variables.get(\"pageSizeProducts\");\r",
													"// if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"//     pm.variables.set(\"pageSize\", pageSize);\r",
													"// }\r",
													"\r",
													"// var totalPages = Math.ceil(pm.variables.get(\"totalProductPages\"), 1);\r",
													"// if(!pageArray || pageArray.length == 0) {\r",
													"\r",
													"// }\r",
													"\r",
													"// if(!pageArray) {\r",
													"//     var pageArray = pm.variables.get(\"pageArray\");\r",
													"//     if (pageArray.length == 0) {\r",
													"//         for(var i = 1; i <= totalPages; i++)\r",
													"//             pageArray.push(i);\r",
													"//         pm.variables.set(\"currentPage\", 1);\r",
													"//     }\r",
													"//     else {\r",
													"//         let currentPage = pageArray.shift();\r",
													"//         if (currentPage == null ) {currentPage = 1} else {\r",
													"//             pm.variables.set(\"currentPage\", currentPage);\r",
													"//     }\r",
													"//     pm.variables.set(\"pageArray\", pageArray);\r",
													"//     }\r",
													"// } else {\r",
													"//     pm.variables.set(\"currentPage\", 1);\r",
													"// }\r",
													"\r",
													"\r",
													"var pageSize = pm.variables.get(\"pageSizeProducts\");\r",
													"if (pageSize == null) {pm.variables.set(\"pageSize\", 25);} else {\r",
													"    pm.variables.set(\"pageSize\", pageSize);\r",
													"}\r",
													"\r",
													"// The totalAccountsPages is set in the previous \"******** - First page\" request\r",
													"var totalPages = Math.ceil(pm.variables.get(\"totalProductPages\"),1);\r",
													"// pageArray is an array of consequtive numbers\r",
													"var pageArray = pm.variables.get(\"pageArray\");\r",
													"\r",
													"if(!pageArray || pageArray.length == 0) {\r",
													"    for(var i = 1; i <= totalPages; i++)\r",
													"        pageArray.push(i);\r",
													"}\r",
													"\r",
													"let currentPage = pageArray.shift();\r",
													"if (currentPage == null) {pm.variables.set(\"currentPage\", 1)} else {\r",
													"    pm.variables.set(\"currentPage\", currentPage);\r",
													"}\r",
													"pm.variables.set(\"pageArray\", pageArray);\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "0e9bedfb-7941-43e7-918e-4ddb18901332"
											}
										}
									],
									"id": "01e5e507-fd26-4896-89a5-65a11444661f",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{unauthenticatedResourceUrl}}/banking/products?effective={{effective}}&product-category={{productCategory}}&page={{currentPage}}&page-size={{pageSize}}",
											"host": [
												"{{unauthenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"products"
											],
											"query": [
												{
													"key": "effective",
													"value": "{{effective}}"
												},
												{
													"key": "product-category",
													"value": "{{productCategory}}"
												},
												{
													"key": "page",
													"value": "{{currentPage}}"
												},
												{
													"key": "page-size",
													"value": "{{pageSize}}"
												}
											]
										},
										"description": "Obtain a list of products that are currently openly offered to the market\n\nNote that the results returned by this end point are expected to be ordered according to updated-since\n\n### Conventions\nIn the product reference payloads there are a number of recurring conventions that are explained here, in one place.\n\n#### Arrays Of Features\n\nIn the product detail payload there are a number of arrays articulating generic features, constraints, prices, etc. The intent of these arrays is as follows:\n\n- Each element in an array has the same structure so that clients can reliably interpret the payloads\n- Each element as a type element that is an enumeration of the specific aspect of a product being described, such as types of fees.\n- Each element has a field name [additionalValue](#productfeaturetypedoc).  This is a generic field with contents that will vary based on the type of object being described. The contents of this field for the ADDITIONAL_CARDS feature is the number of cards allowed while the contents of this field for the MAX_LIMIT constraint would be the maximum credit limit allowed for the product.\n- An element in these arrays of the same type may appear more than once. For instance, a product may offer two separate loyalty programs that the customer can select from. A fixed term mortgage may have different rates for different term lengths.\n- An element in these arrays may contain an additionalInfo and additionalInfoUri field. The additionalInfo field is used to provide displayable text clarifying the purpose of the element in some way when the product is presented to a customer. The additionalInfoUri provides a link to externally hosted information specifically relevant to that feature of the product.\n- Depending on the type of data being represented there may be additional specific fields.\n\n#### URIs To More Information\n\nAs the complexities and nuances of a financial product can not easily be fully expressed in a data structure without a high degree of complexity it is necessary to provide additional reference information that a potential customer can access so that they are fully informed of the features and implications of the product. The payloads for product reference therefore contain numerous fields that are provided to allow the product holder to describe the product more fully using a web page hosted on their online channels.\n\nThese URIs do not need to all link to different pages. If desired, they can all link to a single hosted page and use difference HTML anchors to focus on a specific topic such as eligibility or fees.\n\n#### Linkage To Accounts\nFrom the moment that a customer applies for a product and an account is created the account and the product that spawned it will diverge.  Rates and features of the product may change and a discount may be negotiated for the account.\n\nFor this reason, while productCategory is a common field between accounts and products, there is no specific ID that can be used to link an account to a product within the regime.\n\nSimilarly, many of the fields and objects in the product payload will appear in the account detail payload but the structures and semantics are not identical as one refers to a product that can potentially be originated and one refers to an account that actual has been instantiated and created along with the associated decisions inherent in that process.\n\n#### Dates\nIt is expected that data consumers needing this data will call relatively frequently to ensure the data they have is representative of the current offering from a bank.  To minimise the volume and frequency of these calls the ability to set a lastUpdated field with the date and time of the last update to this product is included.  A call for a list of products can then be filtered to only return products that have been updated since the last time that data was obtained using the updated-since query parameter.\n\nIn addition, the concept of effective date and time has also been included.  This allows for a product to be marked for obsolescence, or introduction, from a certain time without the need for an update to show that a product has been changed.  The inclusion of these dates also removes the need to represent deleted products in the payload.  Products that are no long offered can be marked not effective for a few weeks before they are then removed from the product set as an option entirely."
									},
									"response": []
								},
								{
									"name": "Get Product Detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true)\r",
													"{\r",
													"        // if not id is provided we skip these tests\r",
													"        if (pm.iterationData.get(\"testProductId1\") != \"\")\r",
													"        {\r",
													"                // Parse the response body\r",
													"                var jsonData;\r",
													"                try { jsonData = pm.response.json(); } catch(e) {}\r",
													"                // HTTP Response and headers\r",
													"                pm.test(\"Status code is 200\", function () {\r",
													"                    pm.response.to.have.status(200);\r",
													"                });\r",
													"\r",
													"                pm.test(\"Content-Type header specifies json\", function () {\r",
													"                    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"                });\r",
													"\r",
													"                pm.test(\"x-v header is present and has correct value\", function () {\r",
													"                    var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"                    var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"                    var checkValue = Math.min(requestXv, requestMinXv);\r",
													"                    var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"                    pm.expect(responseXv).gte(checkValue);\r",
													"                });\r",
													"\r",
													"        // Schema payload check\r",
													"        pm.test('Response payload conforms to standards schema', function() {\r",
													"            const valid = ajv.validate(\"ResponseBankingProductByIdV4\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        }); \r",
													"    }\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl\");\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"id": "717de04b-8d26-4b26-85cd-57a409a7a12b"
											}
										}
									],
									"id": "25a67b35-1ed5-4c45-82ab-0fc916fa73f4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{unauthenticatedResourceUrl}}/banking/products/:productId",
											"host": [
												"{{unauthenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"products",
												":productId"
											],
											"variable": [
												{
													"id": "fc16aed5-bbf9-4fea-a645-33df1985a7e1",
													"key": "productId",
													"value": "{{testProductId}}"
												}
											]
										},
										"description": "Obtain detailed information on a single product offered openly to the market"
									},
									"response": []
								},
								{
									"name": "Get Product Detail - Invalid Product",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true)\r",
													"{\r",
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try { jsonData = pm.response.json(); } catch(e) {}\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 404\", function () {\r",
													"            pm.response.to.have.status(404);\r",
													"        });\r",
													"\r",
													"        pm.test(\"Content-Type header specifies json\", function () {\r",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-v header is present and has correct value\", function () {\r",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"            var checkValue = Math.min(requestXv, requestMinXv);\r",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"            pm.expect(responseXv).gte(checkValue);\r",
													"        });\r",
													"\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "940e7472-b4d4-43c4-8380-0f1acc210910"
											}
										}
									],
									"id": "d3de3364-c31b-4d5f-9e99-33b0ad45c672",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{unauthenticatedResourceUrl}}/banking/products/:productId",
											"host": [
												"{{unauthenticatedResourceUrl}}"
											],
											"path": [
												"banking",
												"products",
												":productId"
											],
											"variable": [
												{
													"id": "e01e126e-f214-464d-a5bd-67c47d2d046f",
													"key": "productId",
													"value": "{{invalidId}}"
												}
											]
										},
										"description": "Obtain detailed information on a single product offered openly to the market"
									},
									"response": []
								}
							],
							"id": "a6fa53fa-3483-4a12-bd93-fd49bdc45b46"
						}
					],
					"id": "92746cf7-55a9-4ae6-89dc-78a5c8424672"
				},
				{
					"name": "common",
					"item": [
						{
							"name": "customer",
							"item": [
								{
									"name": "Get Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)",
													"{",
													"        // Parse the response body",
													"        var jsonData;",
													"        try { jsonData = pm.response.json(); } catch(e) {}",
													"",
													"",
													"        // HTTP Response and headers",
													"        pm.test(\"Status code is 200\", function () {",
													"            pm.response.to.have.status(200);",
													"        });",
													"",
													"        pm.test(\"Content-Type header specifies json\", function () {",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"        });",
													"",
													"        pm.test(\"x-v header is present and has correct value\", function () {",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
													"            var checkValue = Math.min(requestXv, requestMinXv);",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
													"            pm.expect(responseXv).gte(checkValue);",
													"        });",
													"",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));",
													"        });",
													"",
													"",
													"        // Schema payload check",
													"        pm.test('Response payload conforms to standards schema', function() {",
													"            const valid = ajv.validate(\"ResponseCommonCustomer\", jsonData)",
													"            if (!valid){",
													"            ajv.errors.forEach(element => {",
													"                console.log(JSON.stringify(element));",
													"                });",
													"            };",
													"            pm.expect(valid).to.be.true; ",
													"        });",
													"",
													"",
													" } else {",
													" \tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");",
													" }"
												],
												"type": "text/javascript",
												"id": "95022311-f259-4dce-a93c-a6302e94b69a"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"id": "8ef97267-602f-490f-9248-d9630beb24a0"
											}
										}
									],
									"id": "575f37c9-83d7-40a4-9d82-f723fcc0eabb",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text"
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text"
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text"
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text"
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{authenticatedCommonUrl}}/common/customer",
											"host": [
												"{{authenticatedCommonUrl}}"
											],
											"path": [
												"common",
												"customer"
											]
										},
										"description": "Obtain basic information on the customer that has authorised the current session"
									},
									"response": []
								},
								{
									"name": "Get Customer Detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (utils.minimumVariablesProvided() == true && utils.accessTokenProvided() == true && utils.clientHeaderProvided() == true)\r",
													"{\r",
													"        // Parse the response body\r",
													"        var jsonData;\r",
													"        try { jsonData = pm.response.json(); } catch(e) {}\r",
													"\r",
													"\r",
													"        // HTTP Response and headers\r",
													"        pm.test(\"Status code is 200\", function () {\r",
													"            pm.response.to.have.status(200);\r",
													"        });\r",
													"\r",
													"        pm.test(\"Content-Type header specifies json\", function () {\r",
													"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-v header is present and has correct value\", function () {\r",
													"            var requestXv = parseInt(pm.variables.get(\"x-v\"));\r",
													"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));\r",
													"            var checkValue = Math.min(requestXv, requestMinXv);\r",
													"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));\r",
													"            pm.expect(responseXv).gte(checkValue);\r",
													"        });\r",
													"\r",
													"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {\r",
													"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"interactionId\"));\r",
													"        });\r",
													"\r",
													"\r",
													"        pm.test('Schema is valid', function() {\r",
													"            const valid = ajv.validate(\"ResponseCommonCustomerDetailV2\", jsonData)\r",
													"            if (!valid){\r",
													"            ajv.errors.forEach(element => {\r",
													"                console.log(JSON.stringify(element));\r",
													"                });\r",
													"            };\r",
													"            pm.expect(valid).to.be.true; \r",
													"        });\r",
													"\r",
													"} else {\r",
													"\tconsole.error(\"Minimum variable set not defined for test: baseUrl, cdsClientHeader, accessToken\");\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "aa9fc1fd-4bad-41cb-9f14-2901599c1114"
											}
										}
									],
									"id": "74173388-7aba-4ca9-b0bc-a4ebb30258ea",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-v",
												"value": "{{x-v}}",
												"type": "text",
												"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
											},
											{
												"key": "x-min-v",
												"value": "{{x-min-v}}",
												"type": "text",
												"description": "Minimum version of the API end point requested by the client. Must be set to a positive integer if provided. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable."
											},
											{
												"key": "x-fapi-interaction-id",
												"value": "{{interactionId}}",
												"type": "text",
												"description": "An [RFC4122](https://tools.ietf.org/html/rfc4122) UID used as a correlation id. If provided, the data holder must play back this value in the x-fapi-interaction-id response header. If not provided a [RFC4122] UUID value is required to be provided in the response header to track the interaction."
											},
											{
												"key": "x-fapi-auth-date",
												"value": "{{timeTenMinutesAgo}}",
												"type": "text",
												"description": "The time when the customer last logged in to the data recipient. Required for all resource calls (customer present and unattended). Not to be included for unauthenticated calls."
											},
											{
												"key": "x-fapi-customer-ip-address",
												"value": "127.0.0.1",
												"type": "text",
												"description": "The customer's original IP address if the customer is currently logged in to the data recipient. The presence of this header indicates that the API is being called in a customer present context. Not to be included for unauthenticated calls."
											},
											{
												"key": "x-cds-client-headers",
												"value": "{{cdsClientHeader}}",
												"type": "text",
												"description": "The customer's original standard http headers [Base64](#common-field-types) encoded, including the original User Agent header, if the customer is currently logged in to the data recipient. Mandatory for customer present calls.  Not required for unattended or unauthenticated calls."
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text",
												"description": "Subject identifier. Locally unique and never reassigned identifier within the Holder for the End-User. Mandatory for authenticated calls. Not required for unattended or unauthenticated calls."
											}
										],
										"url": {
											"raw": "{{authenticatedCommonUrl}}/common/customer/detail",
											"host": [
												"{{authenticatedCommonUrl}}"
											],
											"path": [
												"common",
												"customer",
												"detail"
											]
										},
										"description": "Obtain detailed information on the authorised customer within the current session."
									},
									"response": []
								}
							],
							"id": "d907a07b-dde2-427f-b5d5-e4934e82819a"
						}
					],
					"id": "7cf3a207-2382-4251-9809-b773876ce205"
				},
				{
					"name": "discovery",
					"item": [
						{
							"name": "Get Status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"if (utils.minimumVariablesProvided() == true)",
											"{",
											"        // Parse the response body",
											"        var jsonData;",
											"        try { jsonData = pm.response.json(); } catch(e) {}",
											"",
											"",
											"        // HTTP Response and headers",
											"        pm.test(\"Status code is 200\", function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        pm.test(\"Content-Type header specifies json\", function () {",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"        });",
											"",
											"        pm.test(\"x-v header is present and has correct value\", function () {",
											"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
											"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
											"            var checkValue = Math.min(requestXv, requestMinXv);",
											"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
											"            pm.expect(responseXv).gte(checkValue);",
											"        });",
											"",
											"                // Schema payload check",
											"        pm.test('Response payload conforms to standards schema', function() {",
											"            const valid = ajv.validate(\"ResponseCommonDiscoveryStatus\", jsonData)",
											"            if (!valid){",
											"            ajv.errors.forEach(element => {",
											"                console.log(JSON.stringify(element));",
											"                });",
											"            };",
											"            pm.expect(valid).to.be.true; ",
											"        });   ",
											"} else {",
											"\tconsole.error(\"Minimum variable set not defined for test: baseUrl\");",
											"}",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "3ede606e-e1b7-4379-864b-f00562b680a7"
									}
								}
							],
							"id": "e2ae5ffc-3ce9-48b9-9585-ddaa6cbe1038",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "{{x-v}}",
										"type": "text",
										"description": "Version of the API end point requested by the client. Must be set to a positive integer. The data holder should respond with the highest supported version between [x-min-v](#request-headers) and [x-v](#request-headers). If the value of [x-min-v](#request-headers) is equal to or higher than the value of [x-v](#request-headers) then the [x-min-v](#request-headers) header should be treated as absent. If all versions requested are not supported then the data holder should respond with a 406 Not Acceptable. See [HTTP Headers](#request-headers)"
									},
									{
										"key": "x-min-v",
										"value": "{{x-min-v}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{unauthenticatedCommonUrl}}/discovery/status",
									"host": [
										"{{unauthenticatedCommonUrl}}"
									],
									"path": [
										"discovery",
										"status"
									]
								},
								"description": "Obtain a health check status for the implementation"
							},
							"response": []
						},
						{
							"name": "Get Outages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"if (utils.minimumVariablesProvided() == true)",
											"{",
											"        // Parse the response body",
											"        var jsonData;",
											"        try { jsonData = pm.response.json(); } catch(e) {}",
											"",
											"",
											"        // HTTP Response and headers",
											"        pm.test(\"Status code is 200\", function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        pm.test(\"Content-Type header specifies json\", function () {",
											"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"        });",
											"",
											"        pm.test(\"x-v header is present and has correct value\", function () {",
											"            var requestXv = parseInt(pm.variables.get(\"x-v\"));",
											"            var requestMinXv = parseInt(pm.variables.get(\"x-min-v\"));",
											"            var checkValue = Math.min(requestXv, requestMinXv);",
											"            var responseXv = parseInt(pm.response.headers.get(\"x-v\"));",
											"            pm.expect(responseXv).gte(checkValue);",
											"        });",
											"",
											"            // Schema payload check",
											"        pm.test('Response payload conforms to standards schema', function() {",
											"            const valid = ajv.validate(\"ResponseDiscoveryOutagesList\", jsonData)",
											"            if (!valid){",
											"            ajv.errors.forEach(element => {",
											"                console.log(JSON.stringify(element));",
											"                });",
											"            };",
											"            pm.expect(valid).to.be.true; ",
											"        });",
											"",
											"} else {",
											"\tconsole.error(\"Minimum variable set not defined for test: baseUrl\");",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "b805e93b-eb38-4565-903c-5e2d4c78a984"
									}
								}
							],
							"id": "80aa4eaf-a937-4a64-9038-5129f8c76b9f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "x-v",
										"value": "{{x-v}}",
										"type": "text"
									},
									{
										"key": "x-min-v",
										"value": "{{x-min-v}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{unauthenticatedCommonUrl}}/discovery/outages",
									"host": [
										"{{unauthenticatedCommonUrl}}"
									],
									"path": [
										"discovery",
										"outages"
									]
								},
								"description": "Obtain a list of scheduled outages for the implementation"
							},
							"response": []
						}
					],
					"id": "253245cd-7805-4d74-b21d-1f8ed29a2594"
				}
			],
			"id": "7ea1b4d5-d25a-4525-9f36-d5c051a191dd"
		},
		{
			"name": "Specialised Tests",
			"item": [],
			"id": "cb8150fb-65bc-44e2-ac7c-8e161cf58150"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{accessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"if (pm.iterationData.get(\"baseUrl\") != undefined)",
					"    pm.collectionVariables.set(\"baseUrl\", pm.iterationData.get(\"baseUrl\"));",
					"",
					"if (pm.iterationData.get(\"authenticatedResourceUrl\") != undefined)",
					"    pm.collectionVariables.set(\"authenticatedResourceUrl\", pm.iterationData.get(\"authenticatedResourceUrl\"));",
					"",
					"if (pm.iterationData.get(\"unauthenticatedResourceUrl\") != undefined)",
					"    pm.collectionVariables.set(\"unauthenticatedResourceUrl\", pm.iterationData.get(\"unauthenticatedResourceUrl\"));",
					"",
					"if (pm.iterationData.get(\"authenticatedCommonUrl\") != undefined)",
					"    pm.collectionVariables.set(\"authenticatedCommonUrl\", pm.iterationData.get(\"authenticatedCommonUrl\"));",
					"",
					"if (pm.iterationData.get(\"unauthenticatedCommonUrl\") != undefined)",
					"    pm.collectionVariables.set(\"unauthenticatedCommonUrl\", pm.iterationData.get(\"unauthenticatedCommonUrl\"));",
					"",
					"",
					"if (pm.iterationData.get(\"version\") != undefined)",
					"    pm.collectionVariables.set(\"version\", pm.iterationData.get(\"version\"));    ",
					"",
					"if (pm.iterationData.get(\"x-v\") != undefined)",
					"    pm.collectionVariables.set(\"x-v\", pm.iterationData.get(\"x-v\"));",
					"",
					"if (pm.iterationData.get(\"x-min-v\") != undefined)",
					"    pm.collectionVariables.set(\"x-min-v\", pm.iterationData.get(\"x-min-v\"));",
					"",
					"if (pm.iterationData.get(\"accessToken\") != undefined)",
					"    pm.collectionVariables.set(\"accessToken\", pm.iterationData.get(\"accessToken\"));",
					"",
					"if (pm.iterationData.get(\"cdsClientHeader\") != undefined)",
					"    pm.collectionVariables.set(\"cdsClientHeader\", pm.iterationData.get(\"cdsClientHeader\"));",
					"",
					"if (pm.iterationData.get(\"testAccountId1\") != undefined)",
					"    pm.collectionVariables.set(\"testAccountId1\", pm.iterationData.get(\"testAccountId1\"));",
					"",
					"if (pm.iterationData.get(\"testAccountId2\") != undefined)",
					"    pm.collectionVariables.set(\"testAccountId2\", pm.iterationData.get(\"testAccountId2\"));",
					"",
					"if (pm.iterationData.get(\"testProductId\") != undefined)",
					"    pm.collectionVariables.set(\"testProductId\", pm.iterationData.get(\"testProductId\")); ",
					"",
					"if (pm.iterationData.get(\"testPayeeId\") != undefined)",
					"    pm.collectionVariables.set(\"testPayeeId\", pm.iterationData.get(\"testPayeeId\")); ",
					"",
					"if (pm.iterationData.get(\"testTransactionId\") != undefined)",
					"    pm.collectionVariables.set(\"testTransactionId\", pm.iterationData.get(\"testTransactionId\"));    ",
					"",
					"if (pm.iterationData.get(\"pageSizeBulkDirectDebits\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizeBulkDirectDebits\", pm.iterationData.get(\"pageSizeBulkDirectDebits\"));",
					"",
					"if (pm.iterationData.get(\"pageSizeBulkBalances\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizeBulkBalances\", pm.iterationData.get(\"pageSizeBulkBalances\")); ",
					"",
					"if (pm.iterationData.get(\"pageSizeTransactions\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizeTransactions\", pm.iterationData.get(\"pageSizeTransactions\")); ",
					"",
					"if (pm.iterationData.get(\"pageSizeAccounts\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizeAccounts\", pm.iterationData.get(\"pageSizeAccounts\"));   ",
					"",
					"if (pm.iterationData.get(\"pageSizePayees\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizePayees\", pm.iterationData.get(\"pageSizePayees\"));",
					"",
					"if (pm.iterationData.get(\"pageSizeScheduledPayments\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizeScheduledPayments\", pm.iterationData.get(\"pageSizeScheduledPayments\")); ",
					"",
					"if (pm.iterationData.get(\"pageSizeProducts\") != undefined)",
					"    pm.collectionVariables.set(\"pageSizeProducts\", pm.iterationData.get(\"pageSizeProducts\")); ",
					"",
					"if (pm.iterationData.get(\"pageSize\") != undefined)",
					"    pm.collectionVariables.set(\"pageSize\", pm.iterationData.get(\"pageSize\"));           ",
					"",
					"// Initialise only once",
					"if (pm.variables.get(\"intitalised\") == 0 || pm.variables.get(\"intitalised\") == null) {",
					"let Ajv = require('ajv');",
					"ajv = new Ajv({logger: console});",
					"    pm.variables.set(\"intitalised\",1);",
					"",
					"    // Set some time relevant time stamps",
					"    console.log(\"Pre-request: Setting common variables\")",
					"    var timeCurrent = new Date();",
					"",
					"    var timeTenMinutesAgo = new Date(timeCurrent.getFullYear(),",
					"                                    timeCurrent.getMonth(),",
					"                                    timeCurrent.getDate(),",
					"                                    timeCurrent.getHours(),",
					"                                    timeCurrent.getMinutes()-10,",
					"                                    timeCurrent.getSeconds());",
					"    var dateToday = new Date(timeCurrent.getFullYear(),",
					"                            timeCurrent.getMonth(),",
					"                            timeCurrent.getDate(), 0, 0, 0);",
					"    var dateYesterday = new Date(timeCurrent.getFullYear(),",
					"                                timeCurrent.getMonth(),",
					"                                timeCurrent.getDate() - 1, 0, 0, 0);",
					"    var dateTomorrow = new Date(timeCurrent.getFullYear(),",
					"                                timeCurrent.getMonth(),",
					"                                timeCurrent.getDate() + 1, 0, 0, 0);",
					"    var dateLastYear = new Date(timeCurrent.getFullYear() - 1,",
					"                                timeCurrent.getMonth(),",
					"                                timeCurrent.getDate(), 0, 0, 0);",
					"",
					"    postman.setEnvironmentVariable(\"timeCurrent\", timeCurrent.toISOString());",
					"    postman.setEnvironmentVariable(\"timeTenMinutesAgo\", timeCurrent.toISOString());",
					"    postman.setEnvironmentVariable(\"dateToday\", dateToday.toISOString());",
					"    postman.setEnvironmentVariable(\"dateYesterday\", dateYesterday.toISOString());",
					"    postman.setEnvironmentVariable(\"dateTomorrow\", dateTomorrow.toISOString());",
					"    postman.setEnvironmentVariable(\"dateLastYear\", dateTomorrow.toISOString());",
					"",
					"",
					"    // setting the base url for schema files",
					"    var version = pm.collectionVariables.get(\"version\");",
					"",
					"    var urlBankingSchemaValidationFileDirectory = \"https://raw.githubusercontent.com/ConsumerDataStandardsAustralia/dsb-schema-tools/main/1.15.0/postman/postman-validation-banking-1.15.0.json\";",
					"    // var urlBankingSchemaValidationFileDirectory = \"http://localhost:8080/\" + version + \"/postman/postman-validation-banking-1.15.0.json\";",
					"",
					"",
					"    pm.sendRequest(urlBankingSchemaValidationFileDirectory, (error, responseBanking) => {",
					"        console.log(\"Reading schema files for banking....\"); ",
					"        if (error) {",
					"            console.log('Getting schema returned: ' + error);",
					"        } else {",
					"            ",
					"            try { ",
					"                let bankingSchemaCount = 0;",
					"                let bankingSchemaAdded = 0;",
					"                schemaBanking = responseBanking.json();",
					"                //let schemaBanking = pm.collectionVariables.get(\"GlobalBankingSchema\");  ",
					"                for (var key in schemaBanking) {",
					"                    bankingSchemaCount++;",
					"                    if (schemaBanking.hasOwnProperty(key)) {",
					"                        schemaBanking[key].$id = key;",
					"                        try {",
					"                            ajv.addSchema(schemaBanking[key]);",
					"                            bankingSchemaAdded++;",
					"                        }",
					"                        catch(ex){",
					"                            console.log(\"Exception in \" + key + \" : \" + JSON.stringify(ex));",
					"                        }",
					"                        ",
					"                    }",
					"                }",
					"                console.log(\"Banking schema contains \" + bankingSchemaCount + \" entries\") ;",
					"                console.log(\"Added \" + bankingSchemaAdded + \" schemas from Banking\"); ",
					"            } catch(e) {",
					"                console.log(\"Exception :\" + JSON.stringify(e));",
					"            }",
					"            pm.collectionVariables.set(\"GlobalBankingSchema\", schemaBanking);        ",
					"        }",
					"    }); ",
					"",
					"    // pm.sendRequest(urlCommonSchemaValidationFileDirectory, (error, responseCommon) => {",
					"    //     console.log(\"Reading schema files for Common....\"); ",
					"    //     if (error) {",
					"    //         console.log('Getting schema returned: ' + error);",
					"    //     } else {",
					"            ",
					"    //         try { ",
					"    //             let commonSchemaCount = 0;",
					"    //             let commonSchemaAdded = 0;",
					"    //             schemaCommon = responseCommon.json();",
					"    //             //let schemaBanking = pm.collectionVariables.get(\"GlobalCommonSchema\");  ",
					"    //             for (var key in schemaCommon) {",
					"    //                 commonSchemaCount++;",
					"    //                 if (schemaCommon.hasOwnProperty(key)) {",
					"    //                     schemaCommon[key].$id = key;",
					"    //                     try {",
					"    //                         ajv.addSchema(schemaCommon[key]);",
					"    //                         commonSchemaAdded++;",
					"    //                     }",
					"    //                     catch(ex){",
					"    //                     console.log(\"Exception :\" + JSON.stringify(ex));",
					"    //                     }",
					"                        ",
					"    //                 }",
					"    //             }",
					"    //             console.log(\"Common schema contains \" + commonSchemaCount + \" entries\") ;",
					"    //             console.log(\"Added \" + commonSchemaAdded + \" schemas from Common\"); ",
					"    //         } catch(e) {}",
					"    //         pm.collectionVariables.set(\"GlobalCommonSchema\", schemaCommon);        ",
					"    //     }",
					"    // }); ",
					"  }",
					"",
					"",
					"// This is used for pagination to determine if this is the first page, last page, middle page or",
					"// a single page response",
					"utils = {",
					"    whichPage: function (currPage, totalPages, totalRecords, pageSize ) {",
					"        if (pageSize == null) {pageSize = 25};",
					"        ",
					"        if (currPage == null) {currPage = 1};",
					"",
					"        if (totalPages <= 1 ) return 0;",
					"",
					"        if (totalRecords <= pageSize || (totalRecords > pageSize &&  currPage == 1)) return 1;   ",
					"",
					"        if (currPage > 1 && currPage < totalPages ){ return 2}",
					"",
					"        if (currPage == totalPages ){ return 3}",
					"    },",
					"    minimumVariablesProvided: function ( ) {",
					"        if (pm.variables.get(\"baseUrl\") != \"\" && pm.variables.get(\"x-v\") != \"\")",
					"            return true;",
					"        else",
					"            return false;",
					"    },",
					"    clientHeaderProvided: function ( ) {",
					"        if (pm.variables.get(\"cdsClientHeader\") != \"\" )",
					"            return true;",
					"        else",
					"            return false;",
					"    },",
					"    accessTokenProvided: function ( ) {",
					"        if (pm.variables.get(\"accessToken\") != \"\")",
					"            return true;",
					"        else",
					"            return false;",
					"    }",
					"};",
					"",
					""
				],
				"id": "1614ddf3-ba55-474f-b722-c14c02e2bf42"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "3b329424-e64b-4b3c-9bba-bb7edd18c534"
			}
		}
	],
	"variable": [
		{
			"id": "f45cff78-927d-4e7e-b4c7-856d1cdf0bfa",
			"key": "interactionId",
			"value": "37e3194e-c1f3-4685-8b8d-6cea463f37f4"
		},
		{
			"id": "da8d6eaf-4647-4973-be4b-f3fcdcb911a8",
			"key": "cdsClientHeader",
			"value": "Q29uc3VtZXIgRGF0YSBSaWdodA=="
		},
		{
			"id": "29b8be90-96f5-4193-95b9-c0a92bedef95",
			"key": "invalidId",
			"value": "xxxINVALIDxxx"
		},
		{
			"id": "93240972-e6fb-4329-940c-5dc9af862b69",
			"key": "effective",
			"value": ""
		},
		{
			"id": "42ea8326-f0bd-4316-a180-343f2b66af11",
			"key": "totalDirectDebitPages",
			"value": ""
		},
		{
			"id": "21d6e6c5-393d-4e82-8267-bce449a2ba08",
			"key": "pageArray",
			"value": ""
		},
		{
			"id": "36564edd-0cf9-4146-bb85-55a8ec582f85",
			"key": "totalBulkBalancePages",
			"value": ""
		},
		{
			"id": "b81d2ab2-0a70-4d68-aab5-4456268aaf87",
			"key": "totalTransactionPages",
			"value": ""
		},
		{
			"id": "2eb0d281-bc8a-421c-bf7a-fe8691cb9a61",
			"key": "totalScheduledPaymentsPages",
			"value": ""
		},
		{
			"id": "d236d1a2-fa97-4369-b07c-fd3e530f44e0",
			"key": "totalAccountsPages",
			"value": ""
		},
		{
			"id": "a40aa51b-66ce-460c-80c0-fc5711198251",
			"key": "totalPayeePages",
			"value": ""
		},
		{
			"id": "87ee052b-2b36-44ee-84c8-54a7a9d40d47",
			"key": "productCategory",
			"value": ""
		},
		{
			"id": "90ef48b5-4eaa-48a3-b245-d8b009b73a0b",
			"key": "totalProductPages",
			"value": ""
		},
		{
			"id": "36ae8728-59fa-42b5-8d77-e384396d8e5e",
			"key": "baseUrl",
			"value": ""
		},
		{
			"id": "77d584d0-1ac9-45f5-becb-946b1df45e12",
			"key": "version",
			"value": "1.15.0"
		},
		{
			"id": "176622df-f1da-435e-a4d0-926d32760270",
			"key": "x-v",
			"value": ""
		},
		{
			"id": "ad1eb2d5-b722-4a9e-ac73-2a457b6d0b91",
			"key": "x-min-v",
			"value": ""
		},
		{
			"id": "787d3016-223c-44fb-a2a1-1208b1011a8f",
			"key": "accessToken",
			"value": ""
		},
		{
			"id": "ed5f51c7-4161-410c-958d-395fc4572d41",
			"key": "testAccountId1",
			"value": ""
		},
		{
			"id": "239efc65-007f-4ea5-87b6-8c502b8e01b0",
			"key": "testAccountId2",
			"value": ""
		},
		{
			"id": "a3ac6562-48dd-4e2b-b3cc-4e06765ed888",
			"key": "testProductId",
			"value": ""
		},
		{
			"id": "05272790-2daf-47ec-b2d0-315a2fc51b9e",
			"key": "testPayeeId",
			"value": ""
		},
		{
			"id": "e7ec221a-a433-42b4-9307-75d1886ee5aa",
			"key": "testTransactionId",
			"value": ""
		},
		{
			"id": "d00c30d8-0a1a-4853-9f43-42f6dc9299e7",
			"key": "pageSizeBulkDirectDebits",
			"value": ""
		},
		{
			"id": "d823d1d2-c19d-47db-94f3-7c0abc90fe71",
			"key": "pageSizeBulkBalances",
			"value": ""
		},
		{
			"id": "4ebb33bf-8464-4172-9a14-d1645141fc54",
			"key": "pageSizeTransactions",
			"value": ""
		},
		{
			"id": "0fcf67ee-59f6-4b46-98f4-5b6f75527d44",
			"key": "pageSizeAccounts",
			"value": ""
		},
		{
			"id": "b2ba2ad9-1cd1-4e4a-bfa3-7ebb311892aa",
			"key": "pageSizePayees",
			"value": ""
		},
		{
			"id": "689fa8d5-f4ba-4337-bf35-17c46ae9be03",
			"key": "pageSizeScheduledPayments",
			"value": ""
		},
		{
			"id": "fa2b4bb9-4cd4-4eac-98ab-b50cc5c9a0ed",
			"key": "pageSizeProducts",
			"value": ""
		},
		{
			"id": "7e220ac5-9824-49a7-a37f-b490027ad8b5",
			"key": "collectionVariables",
			"value": ""
		},
		{
			"id": "66d75155-2e89-43c8-b08b-98688cd74f95",
			"key": "intitalised",
			"value": ""
		},
		{
			"id": "82aa97c2-586b-46f5-aa41-4dcb84df8e14",
			"key": "pageSize",
			"value": ""
		},
		{
			"id": "c1084081-bbc7-46c1-b607-0d904c6a58f1",
			"key": "BankingBalance",
			"value": ""
		},
		{
			"id": "92adf790-98f8-4814-882f-f412bef9928b",
			"key": "ResponseBankingAccountsBalanceList",
			"value": ""
		},
		{
			"id": "2a88ef7a-79ec-4f5e-a5a9-ce29ef641f7a",
			"key": "ResponseBankingTransactionList",
			"value": ""
		},
		{
			"id": "9848ef94-74a0-4f52-ae77-6a513ad5c329",
			"key": "ResponseBankingAccountList",
			"value": ""
		},
		{
			"id": "83684393-776c-41e0-926a-76baa21c571d",
			"key": "ResponseBankingAccountsBalanceById",
			"value": ""
		},
		{
			"id": "03bd9da5-8aac-4051-9dc2-58237d443829",
			"key": "ResponseCommonCustomerDetailV2",
			"value": ""
		},
		{
			"id": "c666c856-8304-4d97-87ae-7d1f60bf31c3",
			"key": "ResponseBankingDirectDebitAuthorisationList",
			"value": ""
		},
		{
			"id": "3b2930e6-adb3-4dc0-bfbc-24d0e35706ba",
			"key": "ResponseBankingPayeeListV2",
			"value": ""
		},
		{
			"id": "c42d2eb0-e46c-46ca-a8e2-9d76433e2902",
			"key": "ResponseBankingAccountByIdV2",
			"value": ""
		},
		{
			"id": "090d65a6-9056-4412-9fc6-969f07387129",
			"key": "ResponseBankingScheduledPaymentsList",
			"value": ""
		},
		{
			"id": "9eed6aa6-4efd-43b2-9ee6-07994aa971c9",
			"key": "ResponseBankingProductListV2",
			"value": ""
		},
		{
			"id": "17f9ff98-c6ad-4f1a-a365-8bbd65a30cbd",
			"key": "ResponseBankingPayeeByIdV2",
			"value": ""
		},
		{
			"id": "fcaac811-59ac-4427-b935-475ad77bf08a",
			"key": "ResponseBankingTransactionById",
			"value": ""
		},
		{
			"id": "68933ad5-f828-4d10-baee-7e77e86aee95",
			"key": "ResponseCommonCustomer",
			"value": ""
		},
		{
			"id": "ab77c251-f7f1-4fec-9665-3312fcb9796e",
			"key": "ResponseDiscoveryOutagesList",
			"value": ""
		},
		{
			"id": "4354c380-e54b-4b79-8ef6-89c9527b4c36",
			"key": "ResponseCommonDiscoveryStatus",
			"value": ""
		},
		{
			"id": "30968d65-808c-4b7e-ab97-b683cd73bb3d",
			"key": "ResponseErrorListV2",
			"value": ""
		},
		{
			"id": "fbff26c9-d578-4fab-bae3-10d1ecc6c977",
			"key": "ResponseBankingProductByIdV4",
			"value": ""
		},
		{
			"id": "9823adf8-bb1c-485a-8efc-f8d348577bfc",
			"key": "GlobalSchema",
			"value": ""
		},
		{
			"id": "3c50dae8-bce9-4cb4-bfca-8ef91914c3a5",
			"key": "unauthenticatedCommonUrl",
			"value": ""
		},
		{
			"id": "4d683470-e29f-425e-bb53-430e5aa40a2e",
			"key": "authenticatedCommonUrl",
			"value": ""
		},
		{
			"id": "5ce5b641-9b38-4826-bdab-6a889cba1796",
			"key": "unauthenticatedResourceUrl",
			"value": ""
		},
		{
			"id": "47a05346-4118-4dcf-b34b-892d4d60e377",
			"key": "authenticatedResourceUrl",
			"value": ""
		},
		{
			"id": "28b156e6-cdb8-442b-a656-763015babe6d",
			"key": "GlobalBankingSchema",
			"value": ""
		},
		{
			"id": "761137e5-d3b3-4f2f-a00b-aeec50d1531d",
			"key": "GlobalCommonSchema",
			"value": ""
		}
	]
}